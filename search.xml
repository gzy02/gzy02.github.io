<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>2020 ICPC南京站训练部分题解+补题</title>
    <url>/2020ICPC%E5%8D%97%E4%BA%AC%E7%AB%99%E8%AE%AD%E7%BB%83%E9%83%A8%E5%88%86%E9%A2%98%E8%A7%A3-%E8%A1%A5%E9%A2%98/</url>
    <content><![CDATA[<p>今天是以2020 ICPC南京站作为训练题目，这篇文章主要是对做的题的一个总结以及对于一些差一点做出来题的一个补题。题目顺序是按照个人角度的难度顺序来排的，包括在训练时做的顺序等等。</p>
<hr />
<h1 id="k-k-co-prime-permutation"><a class="markdownIt-Anchor" href="#k-k-co-prime-permutation"></a> <a href="http://codeforces.com/gym/102992/problem/K" target="_blank" rel="noopener">K. K Co-prime Permutation</a></h1>
<h2 id="题目大意"><a class="markdownIt-Anchor" href="#题目大意"></a> 题目大意</h2>
<p>给定两个数<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mo stretchy="false">(</mo><mn>1</mn><mo>≤</mo><mi>n</mi><mo>≤</mo><mn>1</mn><msup><mn>0</mn><mn>6</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">n(1\le n \le 10^6)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">n</span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">6</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>k</mi><mo stretchy="false">(</mo><mn>0</mn><mo>≤</mo><mi>k</mi><mo>≤</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">k(0 \le k \le n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mopen">(</span><span class="mord">0</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83041em;vertical-align:-0.13597em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span>，要求找到一个从1到n的排列，使得这个排列在第i个位置上的数（从1开始）<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>p</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">p_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，恰好有k个i与<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>p</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">p_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>互质，如果不存在输出-1。</p>
<h2 id="思路"><a class="markdownIt-Anchor" href="#思路"></a> 思路</h2>
<p>签到题，是类似CF前两题的一个构造题目，实际上是找到一个从1到n的排列，与从1到n的顺排列相应的位置上恰好有k个数互质。这个实际上是考察了一个互质的性质：<strong>相邻的两个数一定互质</strong>。因此我们可以恰好使前k个数错一位，后面的n-k个数原样输出即可，复杂度是线性的。</p>
<h2 id="代码"><a class="markdownIt-Anchor" href="#代码"></a> 代码</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n, k;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; k;</span><br><span class="line">    <span class="keyword">if</span> (k == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (cnt &lt; k)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (i != <span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; <span class="string">' '</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (i == k)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; i + <span class="number">1</span>;</span><br><span class="line">            cnt++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">' '</span>;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />
<h1 id="l-lets-play-curling"><a class="markdownIt-Anchor" href="#l-lets-play-curling"></a> <a href="http://codeforces.com/gym/102992/problem/L" target="_blank" rel="noopener">L. Let’s Play Curling</a></h1>
<h2 id="题目大意-2"><a class="markdownIt-Anchor" href="#题目大意-2"></a> 题目大意</h2>
<p>有红蓝两个队，分别有<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mo separator="true">,</mo><mi>m</mi><mo stretchy="false">(</mo><mn>1</mn><mo>≤</mo><mi>n</mi><mi mathvariant="normal">.</mi><mi>m</mi><mo>≤</mo><mn>1</mn><msup><mn>0</mn><mn>5</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">n,m(1\le n.m \le 10^5)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">n</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">m</span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span class="mord mathdefault">n</span><span class="mord">.</span><span class="mord mathdefault">m</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">5</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>（n,m的分别总和不超过<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>5</mn><mo>×</mo><mn>1</mn><msup><mn>0</mn><mn>5</mn></msup></mrow><annotation encoding="application/x-tex">5\times 10^5</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">5</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">5</span></span></span></span></span></span></span></span></span></span></span>）颗球分布在一维坐标系上。需要找到一个坐标点c（可以是浮点数），当红队存在球，该球到坐标点c的距离小于蓝队所有球到点c的距离时，红队获胜，且得分为红队存在的这种类型的球的数量。问红队的最高得分是多少。</p>
<h2 id="思路-2"><a class="markdownIt-Anchor" href="#思路-2"></a> 思路</h2>
<p>从样例可以看出，同时也比较显然的贪心，那就是如果对两个蓝队之间有一些红队的球，那么将这个坐标点定为两个蓝队球的中点，那么两个点中间的红队的球到该坐标点的距离一定小于两个蓝队球到中心点的距离，因此这种情况所有两个蓝队球之间的红队球都能产生贡献（不包括重合的端点），也是最好的情况。因此可以对于蓝队球与红队球的坐标进行排序，去遍历蓝队的球，用一个指针标记此时扫描到的红队球的下标，去找到每两个蓝队球之间的红队球的个数（如果两个蓝队球坐标相差不大于1，必定没有），找到其中的最大值，便是答案。有一个需要注意的陷阱就是，这个最大情况可能出现在序列的两端，即红队有一些球在蓝队最左边坐标的左边，那么c只要设置到红队最左边球的左边，那么蓝队最左边的那些红队球都会产生贡献。右边同理。在计算完两个相邻的蓝队球以后记得处理两边即可。复杂度排序是<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mi>log</mi><mo>⁡</mo><mi>n</mi></mrow><annotation encoding="application/x-tex">n\log n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">n</span></span></span></span>，遍历寻找是<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mo>+</mo><mi>m</mi></mrow><annotation encoding="application/x-tex">n+m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">m</span></span></span></span>，最后的复杂度应该是<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>m</mi><mi>a</mi><mi>x</mi><mo stretchy="false">(</mo><mi>n</mi><mi>log</mi><mo>⁡</mo><mi>n</mi><mo separator="true">,</mo><mi>m</mi><mi>log</mi><mo>⁡</mo><mi>m</mi><mo separator="true">,</mo><mi>n</mi><mo>+</mo><mi>m</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">max(n\log n,m\log m,n+m)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">m</span><span class="mord mathdefault">a</span><span class="mord mathdefault">x</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">n</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">m</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">m</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">m</span><span class="mclose">)</span></span></span></span></p>
<h2 id="代码-2"><a class="markdownIt-Anchor" href="#代码-2"></a> 代码</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> t;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> a[maxn];</span><br><span class="line"><span class="keyword">int</span> b[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line">    <span class="keyword">int</span> n, m;</span><br><span class="line">    <span class="keyword">while</span> (t--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; b[j];</span><br><span class="line">        &#125;</span><br><span class="line">        sort(a, a + n);</span><br><span class="line">        sort(b, b + m);</span><br><span class="line">        <span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; m; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (b[i] - b[i - <span class="number">1</span>] &gt; <span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> now_ans = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">while</span> (j &lt; n &amp;&amp; a[j] &lt; b[i])</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span> (a[j] &gt; b[i - <span class="number">1</span>])</span><br><span class="line">                        now_ans++;</span><br><span class="line">                    j++;</span><br><span class="line">                &#125;</span><br><span class="line">                ans = max(ans, now_ans);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        j = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> now_ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (j &lt; n &amp;&amp; a[j] &lt; b[<span class="number">0</span>])</span><br><span class="line">        &#123;</span><br><span class="line">            now_ans++;</span><br><span class="line">            j++;</span><br><span class="line">        &#125;</span><br><span class="line">        ans = max(ans, now_ans);</span><br><span class="line">        j = n - <span class="number">1</span>;</span><br><span class="line">        now_ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (j &gt;= <span class="number">0</span> &amp;&amp; a[j] &gt; b[m - <span class="number">1</span>])</span><br><span class="line">        &#123;</span><br><span class="line">            now_ans++;</span><br><span class="line">            j--;</span><br><span class="line">        &#125;</span><br><span class="line">        ans = max(ans, now_ans);</span><br><span class="line">        <span class="keyword">if</span> (ans == <span class="number">0</span>)</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"Impossible"</span> &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />
<h1 id="e-evil-coordinate"><a class="markdownIt-Anchor" href="#e-evil-coordinate"></a> <a href="http://codeforces.com/gym/102992/problem/E" target="_blank" rel="noopener">E. Evil Coordinate</a></h1>
<h2 id="题目大意-3"><a class="markdownIt-Anchor" href="#题目大意-3"></a> 题目大意</h2>
<p>在无限大的二维平面上，初始在原点(0,0)，给定一个雷的坐标(mx,my)，再给定一个字符串，每一个字符‘UDLR’分别表示向上、向下、向左、向右走一个单位，多组数据串长总和不超过<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><msup><mn>0</mn><mn>6</mn></msup></mrow><annotation encoding="application/x-tex">10^6</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">6</span></span></span></span></span></span></span></span></span></span></span>，让找出一个该串的重排列，使得走的路径不经过雷，不存在则输出<code>Impossible</code></p>
<h2 id="思路-3"><a class="markdownIt-Anchor" href="#思路-3"></a> 思路</h2>
<p>题意简单，也比较显然，模拟即可。模拟的方式不唯一，但是要注意模拟过程中的诸多细节，同时要注意模拟的所有情况要具有完备性。</p>
<p>同时官方题解也给出了一种非常巧妙的做法。首先容易证明如果存在可行解，那么必有一解可以通过连续向一个方向走构成，比如都向上，再都向下这样。所以可以枚举udlr走的顺序，计算4!次结果。然后依次去走，看看能不能走到，走不到就输出，如果都会走到雷，就是impossible。</p>
<p>从模拟的角度来说，我的模拟思路是首先可以发现无论怎么走，到达的终点都是固定的，记为(nowx,nowy)，同时，在x方向上，在y方向上，所有该方向走完都是到达了同一个坐标，因此可以先把所有一个轴方向上的字符都输出完，再去输出另一个方向上的。接着考虑点在轴上以及两个点y或者x相同的情况（可能会挡住）即可，也就有了讨论的方向。</p>
<p>首先如果雷在原点或者终点，那么一定是impossible</p>
<p>1.当雷与终点在同一条直线上时</p>
<ol>
<li>当雷与终点都在坐标轴上时，考虑雷与终点的关系，如果雷与终点在不同半轴上，那么现在垂直方向上行走，再去终点方向走，再去雷的方向。<br />
如果在同一半轴上，如果终点比雷更接近原点，那么先垂直方向，再向没有点的半轴，再反向。否则雷比终点更近，判断垂直方向上是否能走，不能走则是impossible，否则先向垂直方向走一下，再平行方向，再垂直方向。</li>
<li>当不在坐标轴上时，先在垂直方向上走完，再走平行方向即可</li>
</ol>
<p>2.当雷与终点同一条直线上时</p>
<ol>
<li>当雷在坐标轴上时，先在雷所在坐标轴的垂直方向进行运动，再去平行方向运动</li>
<li>雷不在坐标轴上时，随便运动即可，保证向一个方向完全走完以后再去其他方向即可</li>
</ol>
<p>复杂度是线性的</p>
<h2 id="代码-3"><a class="markdownIt-Anchor" href="#代码-3"></a> 代码</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//讨论的做法</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">char</span> s[maxn];</span><br><span class="line"><span class="keyword">using</span> ll = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line">ll num_u, num_d, num_l, num_r;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">move</span><span class="params">(ll &amp;x, ll &amp;y, <span class="keyword">char</span> action)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (action == <span class="string">'U'</span>)</span><br><span class="line">        y++, num_u++;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (action == <span class="string">'D'</span>)</span><br><span class="line">        y--, num_d++;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (action == <span class="string">'L'</span>)</span><br><span class="line">        x--, num_l++;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (action == <span class="string">'R'</span>)</span><br><span class="line">        x++, num_r++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">outl</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; num_l; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">'L'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">outr</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; num_r; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">'R'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">outu</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; num_u; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">'U'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">outd</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; num_d; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">'D'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line">    ll mx, my;</span><br><span class="line">    <span class="keyword">while</span> (t--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; mx &gt;&gt; my;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; s;</span><br><span class="line">        num_d = num_u = num_l = num_r = <span class="number">0</span>;</span><br><span class="line">        ll s_len = <span class="built_in">strlen</span>(s);</span><br><span class="line">        ll nowx = <span class="number">0</span>, nowy = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s_len; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            move(nowx, nowy, s[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> ((mx == <span class="number">0</span> &amp;&amp; my == <span class="number">0</span>) || (nowx == mx &amp;&amp; nowy == my))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"Impossible"</span> &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (mx == <span class="number">0</span> &amp;&amp; nowx == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (my * nowy &lt; <span class="number">0</span> || <span class="built_in">abs</span>(nowy) &lt; <span class="built_in">abs</span>(my))</span><br><span class="line">            &#123;</span><br><span class="line">                outl();</span><br><span class="line">                outr();</span><br><span class="line">                <span class="keyword">if</span> (my * nowy &lt; <span class="number">0</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span> (nowy &lt; <span class="number">0</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        outd();</span><br><span class="line">                        outu();</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        outu();</span><br><span class="line">                        outd();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span> (nowy == <span class="number">0</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">if</span> (my &gt; <span class="number">0</span>)</span><br><span class="line">                        &#123;</span><br><span class="line">                            outd();</span><br><span class="line">                            outu();</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span></span><br><span class="line">                        &#123;</span><br><span class="line">                            outu();</span><br><span class="line">                            outd();</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> (nowy &lt; <span class="number">0</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        outu();</span><br><span class="line">                        outd();</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        outd();</span><br><span class="line">                        outu();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (num_l == <span class="number">0</span> &amp;&amp; num_r == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; <span class="string">"Impossible"</span> &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                outl();</span><br><span class="line">                outu();</span><br><span class="line">                outd();</span><br><span class="line">                outr();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (my == <span class="number">0</span> &amp;&amp; nowy == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (mx * nowx &lt; <span class="number">0</span> || <span class="built_in">abs</span>(nowx) &lt; <span class="built_in">abs</span>(mx))</span><br><span class="line">            &#123;</span><br><span class="line">                outu();</span><br><span class="line">                outd();</span><br><span class="line">                <span class="keyword">if</span> (mx * nowx &lt; <span class="number">0</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span> (nowx &lt; <span class="number">0</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        outl();</span><br><span class="line">                        outr();</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        outr();</span><br><span class="line">                        outl();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span> (nowx == <span class="number">0</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">if</span> (mx &gt; <span class="number">0</span>)</span><br><span class="line">                        &#123;</span><br><span class="line">                            outl();</span><br><span class="line">                            outr();</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span></span><br><span class="line">                        &#123;</span><br><span class="line">                            outr();</span><br><span class="line">                            outl();</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> (nowx &lt; <span class="number">0</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        outr();</span><br><span class="line">                        outl();</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        outl();</span><br><span class="line">                        outr();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (num_u == <span class="number">0</span> &amp;&amp; num_d == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; <span class="string">"Impossible"</span> &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (num_u != <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                outu();</span><br><span class="line">                outr();</span><br><span class="line">                outl();</span><br><span class="line">                outd();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (num_d != <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                outd();</span><br><span class="line">                outr();</span><br><span class="line">                outl();</span><br><span class="line">                outu();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (mx == nowx)</span><br><span class="line">        &#123;</span><br><span class="line">            outu();</span><br><span class="line">            outd();</span><br><span class="line">            outl();</span><br><span class="line">            outr();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (my == nowy)</span><br><span class="line">        &#123;</span><br><span class="line">            outl();</span><br><span class="line">            outr();</span><br><span class="line">            outu();</span><br><span class="line">            outd();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (my == <span class="number">0</span> || mx == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (my == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                outu();</span><br><span class="line">                outd();</span><br><span class="line">                outl();</span><br><span class="line">                outr();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                outl();</span><br><span class="line">                outr();</span><br><span class="line">                outu();</span><br><span class="line">                outd();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            outl();</span><br><span class="line">            outr();</span><br><span class="line">            outu();</span><br><span class="line">            outd();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//题解计算排列的模拟巧妙解法</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">char</span> s[maxn];</span><br><span class="line"><span class="keyword">using</span> ll = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line">ll cnt[<span class="number">5</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">move</span><span class="params">(ll &amp;x, ll &amp;y, <span class="keyword">char</span> action)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (action == <span class="string">'U'</span>)</span><br><span class="line">        y++, cnt[<span class="number">1</span>]++;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (action == <span class="string">'D'</span>)</span><br><span class="line">        y--, cnt[<span class="number">2</span>]++;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (action == <span class="string">'L'</span>)</span><br><span class="line">        x--, cnt[<span class="number">3</span>]++;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (action == <span class="string">'R'</span>)</span><br><span class="line">        x++, cnt[<span class="number">4</span>]++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">out</span><span class="params">(<span class="keyword">char</span> ch, ll cnt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; cnt; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; ch;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line">    ll mx, my;</span><br><span class="line">    <span class="keyword">while</span> (t--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; mx &gt;&gt; my;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; s;</span><br><span class="line">        <span class="built_in">memset</span>(cnt, <span class="number">0</span>, <span class="keyword">sizeof</span>(cnt));</span><br><span class="line">        ll s_len = <span class="built_in">strlen</span>(s);</span><br><span class="line">        ll desx = <span class="number">0</span>, desy = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s_len; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            move(desx, desy, s[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> ((mx == <span class="number">0</span> &amp;&amp; my == <span class="number">0</span>) || (desx == mx &amp;&amp; desy == my))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"Impossible"</span> &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> arrange[<span class="number">4</span>] = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span> fflag = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">do</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//cout&lt;&lt;"cnt";</span></span><br><span class="line">            ll now_x = <span class="number">0</span>, now_y = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">int</span> flag = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; cnt[arrange[i]]; j++)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span> (arrange[i] == <span class="number">1</span>)</span><br><span class="line">                        now_y++;</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> (arrange[i] == <span class="number">2</span>)</span><br><span class="line">                        now_y--;</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> (arrange[i] == <span class="number">3</span>)</span><br><span class="line">                        now_x--;</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> (arrange[i] == <span class="number">4</span>)</span><br><span class="line">                        now_x++;</span><br><span class="line">                    <span class="keyword">if</span> (now_x == mx &amp;&amp; now_y == my)</span><br><span class="line">                    &#123;</span><br><span class="line">                        flag = <span class="number">0</span>;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (flag == <span class="number">0</span>)</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (flag == <span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                fflag = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; cnt[arrange[i]]; j++)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">if</span> (arrange[i] == <span class="number">1</span>)</span><br><span class="line">                            <span class="built_in">cout</span>&lt;&lt;<span class="string">'U'</span>;</span><br><span class="line">                        <span class="keyword">else</span> <span class="keyword">if</span> (arrange[i] == <span class="number">2</span>)</span><br><span class="line">                            <span class="built_in">cout</span>&lt;&lt;<span class="string">'D'</span>;</span><br><span class="line">                        <span class="keyword">else</span> <span class="keyword">if</span> (arrange[i] == <span class="number">3</span>)</span><br><span class="line">                            <span class="built_in">cout</span>&lt;&lt;<span class="string">'L'</span>;</span><br><span class="line">                        <span class="keyword">else</span> <span class="keyword">if</span> (arrange[i] == <span class="number">4</span>)</span><br><span class="line">                            <span class="built_in">cout</span>&lt;&lt;<span class="string">'R'</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">while</span> (next_permutation(arrange, arrange + <span class="number">4</span>));</span><br><span class="line">        <span class="keyword">if</span> (fflag == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"Impossible"</span> &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">            <span class="comment">// for(int i=0;i&lt;4;i++)</span></span><br><span class="line">            <span class="comment">// &#123;</span></span><br><span class="line">            <span class="comment">//     cout&lt;&lt;arrange[i]&lt;&lt;' ';</span></span><br><span class="line">            <span class="comment">// &#125;</span></span><br><span class="line">            <span class="comment">// cout&lt;&lt;'\n';</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />
<h1 id="f-fireworks"><a class="markdownIt-Anchor" href="#f-fireworks"></a> <a href="http://codeforces.com/gym/102992/problem/F" target="_blank" rel="noopener">F - Fireworks</a></h1>
<h2 id="题目大意-4"><a class="markdownIt-Anchor" href="#题目大意-4"></a> 题目大意</h2>
<p>制作一个烟花需要n分钟，点燃之前制作好的所有烟花需要m分钟，每个烟花有<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mi>p</mi><mn>10000</mn></mfrac></mrow><annotation encoding="application/x-tex">\frac{p}{10000}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0925em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.7475em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">0</span><span class="mord mtight">0</span><span class="mord mtight">0</span><span class="mord mtight">0</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.446108em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">p</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span>的概率（后面认为p实际上就是<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mi>p</mi><mn>10000</mn></mfrac></mrow><annotation encoding="application/x-tex">\frac{p}{10000}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0925em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.7475em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">0</span><span class="mord mtight">0</span><span class="mord mtight">0</span><span class="mord mtight">0</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.446108em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">p</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span> ）完美绽放。当有一只烟花完美绽放的时候，便可以去睡觉，问采取最优策略时，所能够去睡觉的最短期望时间。<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><msup><mn>0</mn><mn>4</mn></msup></mrow><annotation encoding="application/x-tex">10^4</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span></span></span></span></span></span></span></span>组数据，每组三个数<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mo separator="true">,</mo><mi>m</mi><mo separator="true">,</mo><mi>p</mi><mo stretchy="false">(</mo><mn>1</mn><mo>≤</mo><mi>n</mi><mo separator="true">,</mo><mi>m</mi><mo>≤</mo><mn>1</mn><msup><mn>0</mn><mn>9</mn></msup><mo separator="true">,</mo><mn>1</mn><mo>≤</mo><mi>p</mi><mo>≤</mo><mn>1</mn><msup><mn>0</mn><mn>4</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">n,m,p(1\le n,m \le 10^9,1\le p \le 10^4)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">n</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">m</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">p</span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8304100000000001em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">n</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">m</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.008548em;vertical-align:-0.19444em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">9</span></span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8304100000000001em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">p</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></p>
<h2 id="思路-4"><a class="markdownIt-Anchor" href="#思路-4"></a> 思路</h2>
<p>典型的数学题（当然有时候也有可能需要结合递推）。首先考虑一下什么是最优策略，显然是在制作h个烟花后再去点燃，所用时间应该是h*n+m。如果要多加点燃次数的话，显然不会使方案最优。每一个烟花是否完美都是独立的，因此概率一样。当当前没有完美烟花的时候那需要再次用该策略再做一次（因为每次都是独立，前面不成功不会说使后续的概率增大，因此后续的最优策略不会变）。</p>
<p>基于这个思想，可以得到期望时间的计算公式（注意可以取反面，即所有烟花都不完美 对应 至少有一个烟花是完美的）：</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>E</mi><mo>=</mo><mo stretchy="false">(</mo><mi>h</mi><mi>n</mi><mo>+</mo><mi>m</mi><mo stretchy="false">)</mo><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><mi>p</mi><msup><mo stretchy="false">)</mo><mi>h</mi></msup><mo stretchy="false">)</mo><mo>+</mo><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><mi>p</mi><msup><mo stretchy="false">)</mo><mi>h</mi></msup><mn>2</mn><mo stretchy="false">(</mo><mi>h</mi><mi>n</mi><mo>+</mo><mi>m</mi><mo stretchy="false">)</mo><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><mi>p</mi><msup><mo stretchy="false">)</mo><mi>h</mi></msup><mo stretchy="false">)</mo><mo>+</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo>+</mo><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><mi>p</mi><msup><mo stretchy="false">)</mo><mrow><mi>h</mi><mo stretchy="false">(</mo><mi>k</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo></mrow></msup><mi>k</mi><mo stretchy="false">(</mo><mi>h</mi><mi>n</mi><mo>+</mo><mi>m</mi><mo stretchy="false">)</mo><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><mi>p</mi><msup><mo stretchy="false">)</mo><mi>h</mi></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">E=(hn+m)(1-(1-p)^h)+(1-p)^h2(hn+m)(1-(1-p)^h)+...+(1-p)^{h(k-1)}k(hn+m)(1-(1-p)^h)
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">h</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">m</span><span class="mclose">)</span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.149108em;vertical-align:-0.25em;"></span><span class="mord mathdefault">p</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8991079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">h</span></span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.149108em;vertical-align:-0.25em;"></span><span class="mord mathdefault">p</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8991079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">h</span></span></span></span></span></span></span></span><span class="mord">2</span><span class="mopen">(</span><span class="mord mathdefault">h</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">m</span><span class="mclose">)</span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.149108em;vertical-align:-0.25em;"></span><span class="mord mathdefault">p</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8991079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">h</span></span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.188em;vertical-align:-0.25em;"></span><span class="mord mathdefault">p</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.938em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">h</span><span class="mopen mtight">(</span><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span><span class="mbin mtight">−</span><span class="mord mtight">1</span><span class="mclose mtight">)</span></span></span></span></span></span></span></span></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mopen">(</span><span class="mord mathdefault">h</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">m</span><span class="mclose">)</span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.149108em;vertical-align:-0.25em;"></span><span class="mord mathdefault">p</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8991079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">h</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></span></p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>E</mi><mo>=</mo><mo stretchy="false">(</mo><mi>h</mi><mi>n</mi><mo>+</mo><mi>m</mi><mo stretchy="false">)</mo><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><mi>p</mi><msup><mo stretchy="false">)</mo><mi>h</mi></msup><mo stretchy="false">)</mo><munder><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow></munder><mi>i</mi><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><mi>p</mi><msup><mo stretchy="false">)</mo><mrow><mi>h</mi><mo stretchy="false">(</mo><mi>i</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo></mrow></msup></mrow><annotation encoding="application/x-tex">E=(hn+m)(1-(1-p)^h)\sum_{i=1}i(1-p)^{h(i-1)}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">h</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">m</span><span class="mclose">)</span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:2.327674em;vertical-align:-1.277669em;"></span><span class="mord mathdefault">p</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8991079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">h</span></span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.0500050000000003em;"><span style="top:-1.872331em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.277669em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">i</span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.188em;vertical-align:-0.25em;"></span><span class="mord mathdefault">p</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.938em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">h</span><span class="mopen mtight">(</span><span class="mord mathdefault mtight">i</span><span class="mbin mtight">−</span><span class="mord mtight">1</span><span class="mclose mtight">)</span></span></span></span></span></span></span></span></span></span></span></span></span></p>
<p>到这里，我们发现后面的式子是一个等差乘等比数列的形式，先计算一下该值，设：</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>S</mi><mo>=</mo><munder><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow></munder><mi>i</mi><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><mi>p</mi><msup><mo stretchy="false">)</mo><mrow><mi>h</mi><mo stretchy="false">(</mo><mi>i</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo></mrow></msup><mo>−</mo><mo>−</mo><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">S=\sum_{i=1}i(1-p)^{h(i-1)}---1
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.327674em;vertical-align:-1.277669em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.0500050000000003em;"><span style="top:-1.872331em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.277669em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">i</span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.188em;vertical-align:-0.25em;"></span><span class="mord mathdefault">p</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.938em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">h</span><span class="mopen mtight">(</span><span class="mord mathdefault mtight">i</span><span class="mbin mtight">−</span><span class="mord mtight">1</span><span class="mclose mtight">)</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span></span></p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><mi>p</mi><msup><mo stretchy="false">)</mo><mi>h</mi></msup><mi>S</mi><mo>=</mo><munder><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow></munder><mi>i</mi><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><mi>p</mi><msup><mo stretchy="false">)</mo><mrow><mi>h</mi><mi>i</mi></mrow></msup><mo>−</mo><mo>−</mo><mo>−</mo><mn>2</mn></mrow><annotation encoding="application/x-tex">(1-p)^hS=\sum_{i=1}i(1-p)^{hi}---2
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.149108em;vertical-align:-0.25em;"></span><span class="mord mathdefault">p</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8991079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">h</span></span></span></span></span></span></span></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.327674em;vertical-align:-1.277669em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.0500050000000003em;"><span style="top:-1.872331em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.277669em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">i</span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.149108em;vertical-align:-0.25em;"></span><span class="mord mathdefault">p</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8991079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">h</span><span class="mord mathdefault mtight">i</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span></span></span></span></span></p>
<p>由1式减去2式错位相减得：</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><mi>p</mi><msup><mo stretchy="false">)</mo><mi>h</mi></msup><mo stretchy="false">)</mo><mi>S</mi><mo>=</mo><munder><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow></munder><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><mi>p</mi><msup><mo stretchy="false">)</mo><mrow><mi>h</mi><mo stretchy="false">(</mo><mi>i</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo></mrow></msup></mrow><annotation encoding="application/x-tex">(1-(1-p)^h)S=\sum_{i=1}(1-p)^{h(i-1)}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.149108em;vertical-align:-0.25em;"></span><span class="mord mathdefault">p</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8991079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">h</span></span></span></span></span></span></span></span><span class="mclose">)</span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.327674em;vertical-align:-1.277669em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.0500050000000003em;"><span style="top:-1.872331em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.277669em;"><span></span></span></span></span></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.188em;vertical-align:-0.25em;"></span><span class="mord mathdefault">p</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.938em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">h</span><span class="mopen mtight">(</span><span class="mord mathdefault mtight">i</span><span class="mbin mtight">−</span><span class="mord mtight">1</span><span class="mclose mtight">)</span></span></span></span></span></span></span></span></span></span></span></span></span></p>
<p>一个单纯的等比数列了，进行求和：</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><mi>p</mi><msup><mo stretchy="false">)</mo><mi>h</mi></msup><mo stretchy="false">)</mo><mi>S</mi><mo>=</mo><munder><mo><mi>lim</mi><mo>⁡</mo></mo><mrow><mi>i</mi><mo>→</mo><mi mathvariant="normal">∞</mi></mrow></munder><mfrac><mrow><mn>1</mn><mo>−</mo><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><mi>p</mi><msup><mo stretchy="false">)</mo><mrow><mi>h</mi><mi>i</mi></mrow></msup></mrow><mrow><mn>1</mn><mo>−</mo><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><mi>p</mi><msup><mo stretchy="false">)</mo><mi>h</mi></msup></mrow></mfrac></mrow><annotation encoding="application/x-tex">(1-(1-p)^h)S=\lim\limits_{i\rightarrow \infty}\frac{1-(1-p)^{hi}}{1-(1-p)^h}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.149108em;vertical-align:-0.25em;"></span><span class="mord mathdefault">p</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8991079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">h</span></span></span></span></span></span></span></span><span class="mclose">)</span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.462108em;vertical-align:-0.936em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.69444em;"><span style="top:-2.072336em;margin-left:0em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">→</span><span class="mord mtight">∞</span></span></span></span><span style="top:-2.7em;"><span class="pstrut" style="height:2.7em;"></span><span><span class="mop">lim</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.727664em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.526108em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">p</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7751079999999999em;"><span style="top:-2.9890000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">h</span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">p</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.849108em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">h</span><span class="mord mathdefault mtight">i</span></span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.936em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>S</mi><mo>=</mo><munder><mo><mi>lim</mi><mo>⁡</mo></mo><mrow><mi>i</mi><mo>→</mo><mi mathvariant="normal">∞</mi></mrow></munder><mfrac><mrow><mn>1</mn><mo>−</mo><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><mi>p</mi><msup><mo stretchy="false">)</mo><mrow><mi>h</mi><mi>i</mi></mrow></msup></mrow><mrow><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><mi>p</mi><msup><mo stretchy="false">)</mo><mi>h</mi></msup><msup><mo stretchy="false">)</mo><mn>2</mn></msup></mrow></mfrac></mrow><annotation encoding="application/x-tex">S=\lim\limits_{i\rightarrow \infty}\frac{1-(1-p)^{hi}}{(1-(1-p)^h)^2}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.462108em;vertical-align:-0.936em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.69444em;"><span style="top:-2.072336em;margin-left:0em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">→</span><span class="mord mtight">∞</span></span></span></span><span style="top:-2.7em;"><span class="pstrut" style="height:2.7em;"></span><span><span class="mop">lim</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.727664em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.526108em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">p</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7751079999999999em;"><span style="top:-2.9890000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">h</span></span></span></span></span></span></span></span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.740108em;"><span style="top:-2.9890000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">p</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.849108em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">h</span><span class="mord mathdefault mtight">i</span></span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.936em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>S</mi><mo>=</mo><mfrac><mn>1</mn><mrow><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><mi>p</mi><msup><mo stretchy="false">)</mo><mi>h</mi></msup><msup><mo stretchy="false">)</mo><mn>2</mn></msup></mrow></mfrac></mrow><annotation encoding="application/x-tex">S=\frac{1}{(1-(1-p)^h)^2}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.25744em;vertical-align:-0.936em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">p</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7751079999999999em;"><span style="top:-2.9890000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">h</span></span></span></span></span></span></span></span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.740108em;"><span style="top:-2.9890000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.936em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p>
<p>原式：</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>E</mi><mo>=</mo><mfrac><mrow><mi>h</mi><mi>n</mi><mo>+</mo><mi>m</mi></mrow><mrow><mn>1</mn><mo>−</mo><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><mi>p</mi><msup><mo stretchy="false">)</mo><mi>h</mi></msup></mrow></mfrac></mrow><annotation encoding="application/x-tex">E=\frac{hn+m}{1-(1-p)^h}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.30744em;vertical-align:-0.936em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.37144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">p</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7751079999999999em;"><span style="top:-2.9890000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">h</span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">h</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">m</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.936em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p>
<p>得到这个式子以后，可以直接猜测，或者测试前面的一部分数，可以发现它是一个单峰函数，可以对其进行三分。也可以求导以后对其零点进行二分。求解出某一个h，使其对应的E最小。复杂度为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>t</mi><mi>log</mi><mo>⁡</mo><mrow></mrow></mrow><annotation encoding="application/x-tex">t\log{}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">t</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"></span></span></span></span>或者<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>t</mi><mi>log</mi><mo>⁡</mo><msup><mrow></mrow><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">t \log{} ^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.008548em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">t</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord"></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span>左右。对于二分或者三分如果不理解的话，在我的博客tag为“模板”的地方有这两种算法的解释。</p>
<p>求导的结果如下：</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>E</mi><mo mathvariant="normal">′</mo></msup><mo>=</mo><mi>h</mi><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><mi>p</mi><msup><mo stretchy="false">)</mo><mi>h</mi></msup><mo stretchy="false">)</mo><mo>+</mo><mo stretchy="false">(</mo><mi>h</mi><mi>n</mi><mo>+</mo><mi>m</mi><mo stretchy="false">)</mo><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><mi>p</mi><msup><mo stretchy="false">)</mo><mi>h</mi></msup><mi>ln</mi><mo>⁡</mo><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><mi>p</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">E&#x27;=h(1-(1-p)^h)+(hn+m)(1-p)^h\ln (1-p)
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.801892em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.801892em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">h</span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.149108em;vertical-align:-0.25em;"></span><span class="mord mathdefault">p</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8991079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">h</span></span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">h</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">m</span><span class="mclose">)</span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.149108em;vertical-align:-0.25em;"></span><span class="mord mathdefault">p</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8991079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">h</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop">ln</span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">p</span><span class="mclose">)</span></span></span></span></span></p>
<p>有一点要注意就是在计算时hn+m是整数运算，下面才会变成浮点数，而上面有可能在计算时就会溢出，考虑提前转换成double。</p>
<p>同时，在计算<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><mi>p</mi><msup><mo stretchy="false">)</mo><mi>h</mi></msup></mrow><annotation encoding="application/x-tex">(1-p)^h</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.099108em;vertical-align:-0.25em;"></span><span class="mord mathdefault">p</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.849108em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">h</span></span></span></span></span></span></span></span></span></span></span>时，由于h可能很大，所以正常计算的复杂度还是很高的，需要考虑用快速幂优化，另外就是如果使用二分，log(1-p)可能会是log(0)，对于p为1时需要特殊处理。</p>
<h2 id="代码-4"><a class="markdownIt-Anchor" href="#代码-4"></a> 代码</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//二分做法</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">using</span> ll = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line">ll n, m, pp;</span><br><span class="line"><span class="keyword">double</span> p;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">ksm</span><span class="params">(<span class="keyword">double</span> b, <span class="keyword">long</span> <span class="keyword">long</span> p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">double</span> ans = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">while</span> (p &gt; <span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (p &amp; <span class="number">1</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			ans = ans * b;</span><br><span class="line">		&#125;</span><br><span class="line">		b *= b;</span><br><span class="line">		p &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(ll mid)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> n * (<span class="number">1</span> - ksm(<span class="number">1</span> - p, mid)) + (mid * n + m) * ksm(<span class="number">1</span> - p, mid) * <span class="built_in">log</span>(<span class="number">1</span> - p) &gt;= <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">cal</span><span class="params">(ll h)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> (<span class="keyword">double</span>(h) * n + m) / (<span class="number">1</span> - ksm(<span class="number">1</span> - p, h));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ll t;</span><br><span class="line">	<span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line">	<span class="keyword">while</span> (t--)</span><br><span class="line">	&#123;</span><br><span class="line"></span><br><span class="line">		<span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m &gt;&gt; pp;</span><br><span class="line">		<span class="keyword">if</span> (pp == <span class="number">10000</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">cout</span> &lt;&lt; n + m &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">			<span class="keyword">continue</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		p = pp / <span class="number">10000.0</span>;</span><br><span class="line">		ll l = <span class="number">1</span>, r = <span class="number">100000000</span>;</span><br><span class="line">		<span class="keyword">while</span> (l &lt; r)</span><br><span class="line">		&#123;</span><br><span class="line">			ll mid = (l + r) / <span class="number">2</span>;</span><br><span class="line">			<span class="keyword">if</span> (check(mid))</span><br><span class="line">			&#123;</span><br><span class="line">				r = mid;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">			&#123;</span><br><span class="line">				l = mid + <span class="number">1</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (l == <span class="number">1</span>)</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">"%.12f\n"</span>, cal(l));</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">"%.12f\n"</span>, min(cal(l), cal(l - <span class="number">1</span>)));</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//三分代码</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">using</span> ll = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line">ll n, m, pp;</span><br><span class="line"><span class="keyword">double</span> p;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">ksm</span><span class="params">(<span class="keyword">double</span> b, <span class="keyword">long</span> <span class="keyword">long</span> p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> ans = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (p &gt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (p &amp; <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            ans = ans * b;</span><br><span class="line">        &#125;</span><br><span class="line">        b *= b;</span><br><span class="line">        p &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">cal</span><span class="params">(ll h)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">double</span>(h) * n + m) / (<span class="number">1</span> - ksm(<span class="number">1</span> - p, h));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll t;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line">    <span class="keyword">while</span> (t--)</span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m &gt;&gt; pp;</span><br><span class="line">        p = pp / <span class="number">10000.0</span>;</span><br><span class="line">        ll l = <span class="number">1</span>, r = <span class="number">100000000</span>;</span><br><span class="line">        <span class="keyword">double</span> lv, rv;</span><br><span class="line">        <span class="keyword">while</span> (l &lt; r)</span><br><span class="line">        &#123;</span><br><span class="line">            ll lm = l + (r - l) / <span class="number">3</span>;</span><br><span class="line">            ll rm = r - (r - l) / <span class="number">3</span>;</span><br><span class="line">            lv = cal(lm);</span><br><span class="line">            rv = cal(rm);</span><br><span class="line">            <span class="keyword">if</span> (lv &lt;= rv)</span><br><span class="line">                r = rm - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                l = lm + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%.12f\n"</span>, min(lv, rv));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>理论学习</category>
      </categories>
      <tags>
        <tag>ACM</tag>
        <tag>题解</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/hello-world/</url>
    <content><![CDATA[<p>Welcome to myblog</p>
]]></content>
  </entry>
  <entry>
    <title>ARM架构CentOS 8下通过Docker搭建GitLab</title>
    <url>/CentOS-8%E4%B8%8B%E6%90%AD%E5%BB%BAGitLab/</url>
    <content><![CDATA[<p>本文主要叙述如何在ARM架构的CentOS 8操作系统下搭建GitLab</p>
<hr />
<h1 id="首先安装docker"><a class="markdownIt-Anchor" href="#首先安装docker"></a> 首先安装Docker</h1>
<p>先下载docker-ce源，不能够直接通过dnf安装docker，通过<code>dnf install docker</code>默认安装的是podman软件，centos8下默认使用podman替换docker，不能够正常使用</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl https://download.docker.com/linux/centos/docker-ce.repo -o /etc/yum.repos.d/docker-ce.repo</span><br></pre></td></tr></table></figure>
<p>卸载podman</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">dnf -y erase podman buildah</span><br></pre></td></tr></table></figure>
<p>再安装docker-ce，<code>--allowerasing</code>表示允许进行包替换</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">dnf install docker-ce --allowerasing</span><br></pre></td></tr></table></figure>
<p>配置docker开机自启，并且启动docker</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl <span class="built_in">enable</span> docker</span><br><span class="line">systemctl start docker</span><br></pre></td></tr></table></figure>
<p>更换国内源，加快镜像拉取速度</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/docker/daemon.json</span><br></pre></td></tr></table></figure>
<p>填入以下内容</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"registry-mirrors"</span>:[</span><br><span class="line">         <span class="string">"http://docker.mirrors.ustc.edu.cn"</span>,</span><br><span class="line">         <span class="string">"http://hub-mirror.c.163.com"</span>,</span><br><span class="line">         <span class="string">"http://registry.docker-cn.com"</span></span><br><span class="line">    ] ,</span><br><span class="line">    <span class="string">"insecure-registries"</span>:[</span><br><span class="line">       <span class="string">"docker.mirrors.ustc.edu.cn"</span>,</span><br><span class="line">         <span class="string">"registry.docker-cn.com"</span></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />
<h1 id="通过docker拉取gitlab镜像"><a class="markdownIt-Anchor" href="#通过docker拉取gitlab镜像"></a> 通过Docker拉取GitLab镜像</h1>
<p>由于正常拉取的gitlab镜像是x86架构的，因此需要特殊拉取arm架构下的镜像</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker pull yrzr/gitlab-ce-arm64v8</span><br></pre></td></tr></table></figure>
<hr />
<h1 id="启动docker镜像"><a class="markdownIt-Anchor" href="#启动docker镜像"></a> 启动Docker镜像</h1>
<p>首先在本机创建存放容器数据的文件夹：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~</span><br><span class="line">mkdir -p gitlabdata/config</span><br><span class="line">mkdir -p gitlabdata/logs</span><br><span class="line">mkdir -p gitlabdata/data</span><br></pre></td></tr></table></figure>
<p>接着启动一个GitLab的容器</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run --detach \</span><br><span class="line">  --publish 443:443 --publish 80:80 --publish 2222:22 \</span><br><span class="line">  --name gitlab \</span><br><span class="line">  --restart always \</span><br><span class="line">  --volume ~/gitlabdata/config:/etc/gitlab \</span><br><span class="line">  --volume ~/gitlabdata/logs:/var/<span class="built_in">log</span>/gitlab \</span><br><span class="line">  --volume ~/gitlabdata/data:/var/opt/gitlab \</span><br><span class="line">  yrzr/gitlab-ce-arm64v8</span><br></pre></td></tr></table></figure>
<ul>
<li>detach表示后台运行</li>
<li>publish表示端口映射，将容器的443、80、22端口映射到本机。443、80分别负责HTTPS与HTTP服务。22端口负责SSH服务，但是由于本机服务器需要SSH服务进行远程登陆，因此将本机的2222端口与容器进行映射</li>
<li>restart表示容器退出后总是重启</li>
<li>volume表示将容器内部的数据映射到本机，防止容器重启后之前的数据丢失</li>
</ul>
<hr />
<h1 id="配置管理员密码"><a class="markdownIt-Anchor" href="#配置管理员密码"></a> 配置管理员密码</h1>
<p>首先登入容器中，进入数据库管理页中</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it gitlab /bin/bash</span><br><span class="line"><span class="built_in">cd</span> /opt/gitlab/bin</span><br><span class="line">gitlab-rails console -e production</span><br></pre></td></tr></table></figure>
<p>修改root账号密码</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">u=User.where(id:1).first</span><br><span class="line">u.password=<span class="string">'xxx'</span></span><br><span class="line">u.password_confirmation=<span class="string">'xxx'</span></span><br><span class="line">u.save!</span><br><span class="line"><span class="built_in">exit</span></span><br></pre></td></tr></table></figure>
<p>此后便可通过root账号登录，并且修改项目的各项配置</p>
<hr />
<h1 id="修改gitlab配置文件"><a class="markdownIt-Anchor" href="#修改gitlab配置文件"></a> 修改GitLab配置文件</h1>
<p>打开相应的配置文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it gitlab /bin/bash</span><br><span class="line">vi /etc/gitlab/gitlab.rb</span><br></pre></td></tr></table></figure>
<p>在该文件中添加：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">external_url &#39;http:&#x2F;&#x2F;10.80.42.208&#39;</span><br><span class="line">gitlab_rails[&#39;gitlab_shell_ssh_port&#39;] &#x3D; 2222</span><br><span class="line">gitlab_rails[&#39;time_zone&#39;] &#x3D; &#39;Asia&#x2F;Shanghai&#39;</span><br></pre></td></tr></table></figure>
<ul>
<li>负责修改正确的clone地址</li>
<li>配置正确的ssh端口</li>
<li>修改时区<br />
重新加载配置文件并且重启服务</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">gitlab-ctl reconfigure</span><br><span class="line">gitlab-ctl restart</span><br></pre></td></tr></table></figure>
<hr />
<h1 id="汉化"><a class="markdownIt-Anchor" href="#汉化"></a> 汉化</h1>
<p>gitlab 12版本以上可以在设置，偏好中自行选择中文</p>
]]></content>
      <categories>
        <category>技术实践</category>
      </categories>
      <tags>
        <tag>环境配置</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Educational Codeforces Round 103——2021/1/29</title>
    <url>/Educational-Codeforces-Round-103%E2%80%94%E2%80%942021-1-29/</url>
    <content><![CDATA[<h1 id="ak-divisible-sum"><a class="markdownIt-Anchor" href="#ak-divisible-sum"></a> <a href="http://codeforces.com/contest/1476/problem/A" target="_blank" rel="noopener">A.K-divisible Sum</a></h1>
<h2 id="题目描述"><a class="markdownIt-Anchor" href="#题目描述"></a> 题目描述</h2>
<p>You are given two integers n and k.</p>
<p>You should create an array of n positive integers <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>a</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">a_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>,<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>a</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">a_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>,…,an such that the sum (<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>a</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">a_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>+<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>a</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">a_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>+⋯+<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>a</mi><mi>n</mi></msub></mrow><annotation encoding="application/x-tex">a_n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>) is divisible by k and maximum element in a is minimum possible.</p>
<p>What is the minimum possible maximum element in a?</p>
<h2 id="输入"><a class="markdownIt-Anchor" href="#输入"></a> 输入</h2>
<p>The first line contains a single integer t (1≤t≤1000) — the number of test cases.</p>
<p>The first and only line of each test case contains two integers n and k (1≤n≤<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><msup><mn>0</mn><mn>9</mn></msup></mrow><annotation encoding="application/x-tex">10^9</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">9</span></span></span></span></span></span></span></span></span></span></span>; 1≤k≤<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><msup><mn>0</mn><mn>9</mn></msup></mrow><annotation encoding="application/x-tex">10^9</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">9</span></span></span></span></span></span></span></span></span></span></span>).</p>
<h2 id="输出"><a class="markdownIt-Anchor" href="#输出"></a> 输出</h2>
<p>For each test case, print one integer — the minimum possible maximum element in array a such that the sum (<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>a</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">a_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>+⋯+<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>a</mi><mi>n</mi></msub></mrow><annotation encoding="application/x-tex">a_n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>) is divisible by k.</p>
<h2 id="样例输入"><a class="markdownIt-Anchor" href="#样例输入"></a> 样例输入</h2>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">4</span><br><span class="line">1 5</span><br><span class="line">4 3</span><br><span class="line">8 8</span><br><span class="line">8 17</span><br></pre></td></tr></table></figure>
<h2 id="样例输出"><a class="markdownIt-Anchor" href="#样例输出"></a> 样例输出</h2>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">5</span><br><span class="line">2</span><br><span class="line">1</span><br><span class="line">3</span><br></pre></td></tr></table></figure>
<h2 id="说明"><a class="markdownIt-Anchor" href="#说明"></a> 说明</h2>
<p>In the first test case n=1, so the array consists of one element a1 and if we make <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>a</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">a_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>=5 it will be divisible by k=5 and the minimum possible.</p>
<p>In the second test case, we can create array a=[1,2,1,2]. The sum is divisible by k=3 and the maximum is equal to 2.</p>
<p>In the third test case, we can create array a=[1,1,1,1,1,1,1,1]. The sum is divisible by k=8 and the maximum is equal to 1.</p>
<h2 id="题目大意"><a class="markdownIt-Anchor" href="#题目大意"></a> 题目大意</h2>
<p>两个数n，k，给n个数每个数一个值，使得它们的和能够被n整除，求这n个数中最大值的最小值。</p>
<h2 id="思路"><a class="markdownIt-Anchor" href="#思路"></a> 思路</h2>
<p>首先看到是典型的求最大值最小的题型，可以考虑使用二分来做（实际上并没有用到）。其次，从贪心的角度来说，sum是固定的，因此我们应该尽可能地将数平铺到每一个数上。</p>
<p>之后我们可以通过观察样例看一下能不能得出什么规律。第三个样例非常典型，n==k，则答案是1。</p>
<p>要整除k，我们可以先考虑一下当n大于k时，如果每个数都是1，那么sum一定是大于k的，如果每个数都从1增加到2，那么整个递增的量是n，一定大于k，因此我们一定能够在每个数都是1的前提下让一部分数变成2，使sum变为k的整数倍，因此n大于k时答案最大是2，<strong>但是要注意，如果本身n就是k的整数倍，那么每个数都是1即可</strong>（我在这里WA了一发）。</p>
<p>可以发现此时就已经讨论完两种情况了，再考虑n小于k的情况。假设每个数平摊下来为m，则最小应有n*m=k，m=k/n。但是此时m可能是小数，考虑到k%n一定小于n，因此如果k%n不等于0，那么余数部分可以均摊到n个数中的某些数中，使得答案增加1变为m+1，简单判断即可。</p>
<h2 id="代码"><a class="markdownIt-Anchor" href="#代码"></a> 代码</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line">ll t;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line">    <span class="keyword">while</span> (t--)</span><br><span class="line">    &#123;</span><br><span class="line">        ll n, k;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; k;</span><br><span class="line">        <span class="keyword">if</span> (n &gt; k)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (n % k == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; <span class="number">1</span> &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; <span class="number">2</span> &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (n == k)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="number">1</span> &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; k / n + <span class="keyword">bool</span>(k % n) &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />
<h1 id="binflation"><a class="markdownIt-Anchor" href="#binflation"></a> <a href="http://codeforces.com/contest/1476/problem/A" target="_blank" rel="noopener">B.Inflation</a></h1>
<h2 id="题目描述-2"><a class="markdownIt-Anchor" href="#题目描述-2"></a> 题目描述</h2>
<p>You have a statistic of price changes for one product represented as an array of n positive integers <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>p</mi><mn>0</mn></msub></mrow><annotation encoding="application/x-tex">p_0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>,<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>p</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">p_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>,…,<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>p</mi><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></msub></mrow><annotation encoding="application/x-tex">p_{n-1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.638891em;vertical-align:-0.208331em;"></span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.301108em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span></span></span></span>, where <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>p</mi><mn>0</mn></msub></mrow><annotation encoding="application/x-tex">p_0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> is the initial price of the product and <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>p</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">p_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> is how the price was increased during the i-th month.</p>
<p>Using these price changes you are asked to calculate the inflation coefficients for each month as the ratio of current price increase pi to the price at the start of this month (<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>p</mi><mn>0</mn></msub></mrow><annotation encoding="application/x-tex">p_0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>+<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>p</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">p_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>+⋯+<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>p</mi><mrow><mi>i</mi><mo>−</mo><mn>1</mn></mrow></msub></mrow><annotation encoding="application/x-tex">p_{i-1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.638891em;vertical-align:-0.208331em;"></span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span></span></span></span>).</p>
<p>Your boss said you clearly that the inflation coefficients must not exceed k %, so you decided to increase some values pi in such a way, that all pi remain integers and the inflation coefficients for each month don’t exceed k %.</p>
<p>You know, that the bigger changes — the more obvious cheating. That’s why you need to minimize the total sum of changes.</p>
<p>What’s the minimum total sum of changes you need to make all inflation coefficients not more than k %?</p>
<h2 id="输入-2"><a class="markdownIt-Anchor" href="#输入-2"></a> 输入</h2>
<p>The first line contains a single integer t (1≤t≤1000) — the number of test cases.</p>
<p>The first line of each test case contains two integers n and k (2≤n≤100; 1≤k≤100) — the length of array p and coefficient k.</p>
<p>The second line of each test case contains n integers <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>p</mi><mn>0</mn></msub></mrow><annotation encoding="application/x-tex">p_0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>,<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>p</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">p_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>,…,<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>p</mi><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></msub></mrow><annotation encoding="application/x-tex">p_{n-1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.638891em;vertical-align:-0.208331em;"></span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.301108em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span></span></span></span> (1≤<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>p</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">p_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>≤109) — the array p.</p>
<h2 id="输出-2"><a class="markdownIt-Anchor" href="#输出-2"></a> 输出</h2>
<p>For each test case, print the minimum total sum of changes you need to make all inflation coefficients not more than k %.</p>
<h2 id="样例输入-2"><a class="markdownIt-Anchor" href="#样例输入-2"></a> 样例输入</h2>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2</span><br><span class="line">4 1</span><br><span class="line">20100 1 202 202</span><br><span class="line">3 100</span><br><span class="line">1 1 1</span><br></pre></td></tr></table></figure>
<h2 id="样例输出-2"><a class="markdownIt-Anchor" href="#样例输出-2"></a> 样例输出</h2>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">99</span><br><span class="line">0</span><br></pre></td></tr></table></figure>
<h2 id="题目大意-2"><a class="markdownIt-Anchor" href="#题目大意-2"></a> 题目大意</h2>
<p>给定一个序列p和一个数k，可以将序列中的某些数增加一些数，使得索引变量i从1开始，满足所有的$$\frac{p_i}{\sum_{j=0}^{i-1}p_j}&lt;=\frac{k}{100}$$，求增加的数的最小总和</p>
<h2 id="思路-2"><a class="markdownIt-Anchor" href="#思路-2"></a> 思路</h2>
<p>不等式已经很明确了，先做个变形，因为不可能去进行浮点运算。</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>p</mi><mi>i</mi></msub><mo>∗</mo><mn>100</mn><mo>&lt;</mo><mo>=</mo><mi>k</mi><mo>∗</mo><munderover><mo>∑</mo><mrow><mi>j</mi><mo>=</mo><mn>0</mn></mrow><mrow><mi>i</mi><mo>−</mo><mn>1</mn></mrow></munderover><msub><mi>p</mi><mi>j</mi></msub></mrow><annotation encoding="application/x-tex">p_i*100&lt;=k*\sum_{j=0}^{i-1}p_j
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6597200000000001em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68354em;vertical-align:-0.0391em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span></span><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:3.2254460000000007em;vertical-align:-1.4137769999999998em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.8116690000000006em;"><span style="top:-1.872331em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span><span class="mrel mtight">=</span><span class="mord mtight">0</span></span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3000050000000005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.4137769999999998em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span></span></p>
<p>接着我们可以考虑，如果对于<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>p</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">p_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，它不满足条件，那么就需要在它之前对于某些数增加一些值，使得<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>p</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">p_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>可以满足，而在无论在前面哪里增加，都只会让前序不等式更容易达成，因此，完全可以将所有的要增加的值增加给p[0]。</p>
<p>而至于增加多少可以达成目标并且最小，我们发现这是个分界明显的最小值问题。可以考虑<strong>二分答案</strong>。对于某一个值，把它加到p[0]上面，之后对于后续的p都进行不等式判断，如果都通过，则说明是可行的解，中间有不满足的不等式，则说明不可，可以发现判断条件很容易达成！</p>
<p>最后再看一下复杂度，需要进行<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>log</mi><mo>⁡</mo></mrow><annotation encoding="application/x-tex">\log</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span></span></span></span>次判断，每次判断需要<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span>的代价，总的复杂度为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>t</mi><mi>n</mi><mi>log</mi><mo>⁡</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(tn\log)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">t</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mclose">)</span></span></span></span>，数据量大约在1e6，可以满足要求。</p>
<h2 id="代码-2"><a class="markdownIt-Anchor" href="#代码-2"></a> 代码</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">110</span>;</span><br><span class="line">ll n, k;</span><br><span class="line">ll nn[maxn];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(ll mid)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll now = nn[<span class="number">0</span>] + mid;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (nn[i] * <span class="number">100</span> &gt; now * k)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        now += nn[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="number">0</span>);</span><br><span class="line">    ll t;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line">    <span class="keyword">while</span> (t--)</span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; k;</span><br><span class="line">        ll max_v = <span class="number">1e13</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; nn[i];</span><br><span class="line">        &#125;</span><br><span class="line">        ll min_v = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (min_v &lt; max_v)</span><br><span class="line">        &#123;</span><br><span class="line">            ll mid = (min_v + max_v) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (check(mid))</span><br><span class="line">            &#123;</span><br><span class="line">                max_v = mid;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                min_v = mid + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; min_v &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />
<h1 id="clongest-simple-cycle"><a class="markdownIt-Anchor" href="#clongest-simple-cycle"></a> <a href="http://codeforces.com/contest/1476/problem/C" target="_blank" rel="noopener">C.Longest Simple Cycle</a></h1>
<h2 id="题目描述-3"><a class="markdownIt-Anchor" href="#题目描述-3"></a> 题目描述</h2>
<p>You have n chains, the i-th chain consists of ci vertices. Vertices in each chain are numbered independently from 1 to <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>c</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">c_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> along the chain. In other words, the i-th chain is the undirected graph with <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>c</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">c_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> vertices and (<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>c</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">c_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>−1) edges connecting the j-th and the (j+1)-th vertices for each 1≤j&lt;<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>c</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">c_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>.</p>
<p>Now you decided to unite chains in one graph in the following way:</p>
<ol>
<li>the first chain is skipped;</li>
<li>the 1-st vertex of the i-th chain is connected by an edge with the ai-th vertex of the (i−1)-th chain;</li>
<li>the last (<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>c</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">c_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>-th) vertex of the i-th chain is connected by an edge with the bi-th vertex of the (i−1)-th chain.</li>
</ol>
<p><img src="../images/pasted-3.png" alt="upload successful" /></p>
<p>Calculate the length of the longest simple cycle in the resulting graph.</p>
<p>A simple cycle is a chain where the first and last vertices are connected as well. If you travel along the simple cycle, each vertex of this cycle will be visited exactly once.</p>
<h2 id="输入-3"><a class="markdownIt-Anchor" href="#输入-3"></a> 输入</h2>
<p>The first line contains a single integer t (1≤t≤1000) — the number of test cases.</p>
<p>The first line of each test case contains the single integer n (2≤n≤105) — the number of chains you have.</p>
<p>The second line of each test case contains n integers <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>c</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">c_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>,<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>c</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">c_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>,…,<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>c</mi><mi>n</mi></msub></mrow><annotation encoding="application/x-tex">c_n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> (2≤<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>c</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">c_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>≤109) — the number of vertices in the corresponding chains.</p>
<p>The third line of each test case contains n integers <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>a</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">a_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>,<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>a</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">a_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>,…,<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>a</mi><mi>n</mi></msub></mrow><annotation encoding="application/x-tex">a_n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> (<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>a</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">a_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>=−1; 1≤<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>a</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">a_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>≤<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>a</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">a_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>−1).</p>
<p>The fourth line of each test case contains n integers <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>b</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">b_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>,<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>b</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">b_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>,…,<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>b</mi><mi>n</mi></msub></mrow><annotation encoding="application/x-tex">b_n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> (<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>b</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">b_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>=−1; 1≤<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>b</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">b_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>≤<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>c</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">c_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>−1).</p>
<p>Both <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>a</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">a_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> and <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>b</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">b_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> are equal to −1, they aren’t used in graph building and given just for index consistency. It’s guaranteed that the sum of n over all test cases doesn’t exceed <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><msup><mn>0</mn><mn>5</mn></msup></mrow><annotation encoding="application/x-tex">10^5</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">5</span></span></span></span></span></span></span></span></span></span></span>.</p>
<h2 id="输出-3"><a class="markdownIt-Anchor" href="#输出-3"></a> 输出</h2>
<p>For each test case, print the length of the longest simple cycle.</p>
<h2 id="样例输入-3"><a class="markdownIt-Anchor" href="#样例输入-3"></a> 样例输入</h2>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">3</span><br><span class="line">4</span><br><span class="line">3 4 3 3</span><br><span class="line">-1 1 2 2</span><br><span class="line">-1 2 2 3</span><br><span class="line">2</span><br><span class="line">5 6</span><br><span class="line">-1 5</span><br><span class="line">-1 1</span><br><span class="line">3</span><br><span class="line">3 5 2</span><br><span class="line">-1 1 1</span><br><span class="line">-1 3 5</span><br></pre></td></tr></table></figure>
<h2 id="样例输出-3"><a class="markdownIt-Anchor" href="#样例输出-3"></a> 样例输出</h2>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">7</span><br><span class="line">11</span><br><span class="line">8</span><br></pre></td></tr></table></figure>
<h2 id="题目大意-3"><a class="markdownIt-Anchor" href="#题目大意-3"></a> 题目大意</h2>
<p>n个链条，第i条上c[i]个节点，同时除了第一条以外每个链条的第一个节点与上一个链条的第a[i]个节点相连，最后一个节点与上一个链条的第b[i]个节点相连，问简单回路的最大长度（根据样例来看是按照节点的个数来衡量）</p>
<h2 id="思路-3"><a class="markdownIt-Anchor" href="#思路-3"></a> 思路</h2>
<p>从第一个样例可以观察到，如果当前链条的两个端点连接到了同一个点，那么这个点必是某一个简单回路的开始点。</p>
<p>从第三个样例可以看到，不一定是路径的链条数越多越好，很可能在某个地方就停止了，如果这个链条中间的节点比后续可扩展节点多的话。基于这个思想，我们可以考虑一个dp或者递推的思路来解决。</p>
<p>对于从第二个链条开始，每一个链条都有可能是结束的链条，因此对于每一个链条都以它为结束取一个最大值，其值等于前面能传递过来的最大节点数加上这条链条的节点数。</p>
<p>因此需要维护一个能传递过来的前序最大节点数tran，如果当前这个链条连接下一个链条的节点重合，那么向后传递的tran值置为1，否则，向后传递的tran值等于上一个链条传递过来的tran值加两个连接点到两个端点的距离。<strong>但是注意，不只是这一种情况，当前链条向后传递的tran值也有可能是以当前链条为开始链条（即使不是两个连接点重合，当中间区域非常大，比前序tran值大时，则可以取中间部分）</strong></p>
<p><img src="../images/pasted-4.png" alt="upload successful" /></p>
<h2 id="代码-3"><a class="markdownIt-Anchor" href="#代码-3"></a> 代码</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line">ll t;</span><br><span class="line">ll n;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">2e5</span> + <span class="number">10</span>;</span><br><span class="line">ll c[maxn];</span><br><span class="line">ll a[maxn];</span><br><span class="line">ll b[maxn];</span><br><span class="line">ll self1[maxn];</span><br><span class="line">ll self2[maxn];</span><br><span class="line">ll tran[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line">    <span class="keyword">while</span> (t--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; c[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; b[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            self1[i] = min(a[i + <span class="number">1</span>], b[i + <span class="number">1</span>]);</span><br><span class="line">            self2[i] = max(a[i + <span class="number">1</span>], b[i + <span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        tran[<span class="number">0</span>] = self2[<span class="number">0</span>] - self1[<span class="number">0</span>] + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        ll ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//dp[i]=tran[i-1]+c[i];</span></span><br><span class="line">            ans = max(ans, tran[i - <span class="number">1</span>] + c[i]);</span><br><span class="line">            <span class="keyword">if</span> (self1[i] == self2[i])</span><br><span class="line">            &#123;</span><br><span class="line">                tran[i] = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//cout&lt;&lt;"tran"&lt;&lt;i&lt;&lt;':'&lt;&lt;tran[i]&lt;&lt;'\n';</span></span><br><span class="line">                tran[i] = max(self2[i] - self1[i] + <span class="number">1</span>, tran[i - <span class="number">1</span>] + self1[i] + c[i] - self2[i] + <span class="number">1</span>);</span><br><span class="line">                <span class="comment">//cout&lt;&lt;"tran"&lt;&lt;i&lt;&lt;':'&lt;&lt;tran[i]&lt;&lt;'\n';</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>理论学习</category>
      </categories>
      <tags>
        <tag>题解</tag>
        <tag>算法</tag>
        <tag>Codeforces</tag>
      </tags>
  </entry>
  <entry>
    <title>【外文翻译】基于Python框架开发安全的RESTful API Web服务的原则</title>
    <url>/%E3%80%90%E5%A4%96%E6%96%87%E7%BF%BB%E8%AF%91%E3%80%91%E5%9F%BA%E4%BA%8EPython%E6%A1%86%E6%9E%B6%E5%BC%80%E5%8F%91%E5%AE%89%E5%85%A8%E7%9A%84RESTful-API-Web%E6%9C%8D%E5%8A%A1%E7%9A%84%E5%8E%9F%E5%88%99/</url>
    <content><![CDATA[<p>本文系毕业设计中需要进行的外文翻译工作，因该文对于整个Web服务做了一个较为全面的综述与总结，因此将翻译成果放到这里和大家分享。</p>
<p><a href="https://iopscience.iop.org/article/10.1088/1742-6596/2094/3/032016" target="_blank" rel="noopener">原文链接</a></p>
<hr />
<h1 id="摘要"><a class="markdownIt-Anchor" href="#摘要"></a> 摘要</h1>
<p>本文讨论了开发用于保存学生成就日志的安全的RESTful Web服务API的关键点，分析了使用Web服务的相关性，给出了Web应用的分类，考虑了单页应用程序架构的特征，给出了应用程序接口架构风格的特征比较，考虑了RESTful API服务需要满足的要求，分析了API安全的基本原理，给出了REST API开发过程中可能出现的主要漏洞列表，给出了流行的认证方案（方法）的概述，给出了Python编程语言的Web框架的特点比较，列出了开发Web API应用程序中使用的主要工具，介绍了使用Flask微框架和用于描述Swagger规范的工具在Python中创建RESTful Web服务API的安全原型的过程，详细检查了配置应用程序的过程，列出了保护Web应用程序、数据库和Web服务器设置的主要建议，考虑了保护已开发的Web应用程序的关键点，并且对以上所得结果进行了分析。</p>
<hr />
<h1 id="简介"><a class="markdownIt-Anchor" href="#简介"></a> 简介</h1>
<p>在现代社会数字全球化的背景下，商业性质的解决方案向线上进行大规模过度的趋势变得越来越明显[1]。从前开发的软件也正在以Web交互形式不断重建。当创建新的服务时，基于Web的解决方案要比移动端和桌面平台更优。这种转变是由软件和对端的用户之间更加方便、易于访问的交互机制所不断推动的[2]。在线资源不会对用户提出严格的硬件要求（存储空间、内存大小、中央处理器（CPU）能力），也不会绑定只能与某些特定平台（个人计算机、智能手机、专用设备）交互。它们通过专门的互联网浏览器来组织工作。此外，线上交易的份额正在不断增长，这也导致了对于网站和网络应用程序的关注和需求不断增加[3]。</p>
<p>但是，网站逻辑的复杂性也在不断上升。因此，普通的静态网站或者基于内容管理系统（Wordpress、Joomla、IC-Bitrix）的动态解决方案在非线性平台或者电子商务的细分领域变得不再能满足客户的需求。同时，在功能方面以及软件产品的开发、扩展、保护和维护过程的效率方面，上述方案也都出现了许多问题。最后的结果就是，静态网站几乎完全被功能齐全的Web应用程序所取代。</p>
<p>Web应用程序不再是HTML页面、样式文件、脚本文件和媒体文件的集合。Web应用程序基于功能和外观分离的C/S架构。应用程序的业务逻辑在一个特殊的专用服务器（后端）上执行，而客户端则与用户的因特网浏览器上的用户界面进行交互（前端）。这种方法允许实时生成HTML内容，并且能够使得在查看的网页上重新加载的次数最少。几乎所有的现代电子商务网站、社交网站、即时通讯工具、在线程序、论坛和搜索引擎都是Web应用程序[4]。</p>
<p>根据主要组件的类型，Web应用程序可以分为以下几种类型：后端、前端和SPA。</p>
<p>后端应用程序（服务端应用程序）集中了应用程序的主要功能和逻辑，并且与数据库交互。它们可以使用多种编程语言进行开发，其中最主流的有：Python、Ruby、PHP、C#（.NET）、Node.js。但是，如果不使用被称为Web框架的特殊工具，那就几乎不可能实现生产可用的解决方案。上面列出的每种编程语言都有自己的一组用于创建Web应用程序的框架：Python（Django、Flask、FastAPI、Tornado），PHP（Laravel、Simfony、Yii2），Ruby（Ruby on Rails、Sinatra），Node.js（Express.js），C#（ASP .NET Core）。</p>
<p>框架承担了一部分开发人员的任务，并且能够提供典型的重定向、身份验证、注册和其他功能从而保证应用程序的安全性。该应用程序部署在专门配置的Web服务器上，并且独立地生成HTML显示文件（但是，在大多数情况下，浏览器还是会重新加载页面）。</p>
<p>前端应用程序（客户端应用程序）直接工作在用户的Web浏览器中。它们是使用JavaScript、TypeScript和Vue.js、ReactJS、AngularJS编程语言开发的。它们适用于应用程序不使用数据库并且客户端信息不超过一个会话的情况下。它们全权负责HTML代码的呈现。</p>
<p>SPA（单页应用程序）是上述解决方案的一个组合，它将一个Web应用程序分为两个（前端和后端），并且组织它们之间的交互。后端部分处理逻辑和请求，并同数据库一起工作；前端部分则根据后端传来的数据形成一个对外的视图，并且将结果呈现在浏览器中。应用程序的客户端和服务端之间的信息交互通常通过专门开发的应用程序编程接口（API）进行。几乎所有的现代Web应用程序都基于SPA的概念。</p>
<p>API是一组应用程序交换信息和传输数据的方法和规则。通常来说，它们是一个程序用于与另外的程序交互的类、函数、结构体。API不仅有助于组织交互，它还在保证交互的安全性方面发挥着重要作用。这样的接口隐藏了服务实现的细节，并且在开发人员提供的框架内工作。使用应用程序程序接口，可以对用户可用的操作施加限制，指定输入输出的数据[5]。此外，API还有许多反映接口交互工作架构风格的功能。</p>
<p>此类应用程序由于逻辑复杂，并且由许多组件组成，因此系统安全性被显著影响[6]。组织安全性时需要考虑许多因素。除了前后端的安全性外，还应该专注于开发安全的API。入侵或者意外的客户端错误可能导致服务不可用、数据丢失或整个应用程序无法运行。这会严重影响用户体验，并且给企业带来巨大损失。因此，在开发任何Web服务时，确保安全性都是一个热门话题。</p>
<p>本文致力于开发安全的RESTful API Web服务，使用Python3编程语言和Flask Web微框架生成学生成绩列表。</p>
<hr />
<h1 id="材料和方案"><a class="markdownIt-Anchor" href="#材料和方案"></a> 材料和方案</h1>
<p>API的实现基于使用的协议和软件规范，为传输的消息构建了句法和语义规则。这些规范构成了API的架构。</p>
<p>目前有许多包含标准化模式和数据交换规则的架构风格。最常见的架构风格是RPC（gRPC）、REST、SOAP和GraphQL。</p>
<p>以RPC（远程过程调用）规范为代表的架构风格允许在HTTP API的上下文中远程调用函数。当远程调用特定过程时，客户端通过为服务器生成特殊消息来获取大部分功能。服务器反序列化收到的消息[7]，启动请求的函数并且返回结果。gRPC是RPC的新版本，旨在解决上一版本规范存在的一些问题。gRPC还添加了许多新功能，例如负载均衡、消息追踪等。此外，这个新标准开始使用了protobufs的概念，并且运行在HTTP/2之上。Protobuf是一个proto文件，它是一个字典，数据在此基础上以特殊的二进制格式进行编码和解码。也就是说，它是一种新的序列化格式（JSON/XML的替代品），用于客户端和服务器之间的信息交换[8]。该创新允许在实时大量数据交换的环境中保持高性能，它也能够使用SSL/TLS、OAuth 2.0、身份认证用令牌、或者是你自己编写的安全身份认证实现。</p>
<p>RPC（gRPC）的好处：</p>
<ul>
<li>简单的交互机制；</li>
<li>添加函数并随后转换到对端的能力；</li>
<li>高性能；</li>
<li>与安全工具交互的能力。</li>
</ul>
<p>RPC（gRPC）的缺点：</p>
<ul>
<li>抽象程度低，导致重用困难；</li>
<li>进行规格化较困难；</li>
<li>在查询的自省上存在问题</li>
<li>由于无法完全隐藏API实现的细节而降低了安全性</li>
</ul>
<p>RPC（gRPC）最适用于开发用于内部通信的高性能微服务[9]，以及为远程控制系统创建API，例如在物联网领域等。</p>
<p>GraphQL是Facebook开发人员引入的另一个规范。GraphQL专注于图形格式的数据表示。与关系数据库中表格视图的创建者不同，GraphQL的开发人员借鉴了MongoDB等面向文档的数据库，开创了一种文档结构。该实现基于相互引用（边）的实体（节点）图。</p>
<p>首先，构建一个方案来描述（使用SDL语言的特殊语法）预期响应中的确切查询和数据类型。具有这种指定方案的客户端，甚至能够在发送查询之前，就可以确保服务器对其有答案。在后端，操作根据方案进行解释，并以JSON格式发送响应以及请求的数据。因此，我们拥有一种基于查询方案的技术，可以从多个端点接收数据，并以查询发送者确定的查询方案做出单个响应。此外，GraphQL支持订阅机制，允许从Web服务器实时接收信息。</p>
<p>GraphQL的好处：</p>
<ul>
<li>一个查询足以检索任何复杂的数据；</li>
<li>使得特定类型的数据查询方案可行；</li>
<li>有效地处理关联数据；</li>
<li>具有详细的错误日志；</li>
<li>查询可灵活定制（格式定义、分割、版本单一）。</li>
</ul>
<p>GraphQL的缺点：</p>
<ul>
<li>如果一个查询中有太多的嵌套字段，可能会降低性能；</li>
<li>缓存困难；</li>
<li>学习曲线高，需要SDL进行必要的处理。</li>
</ul>
<p>当你需要封装开发API的系统的复杂逻辑时，GraphQL是一个很好的选择，这在设计庞大的项目和微服务时很重要。此外，GraphQL通过优化单个消息的有效负载（payload），为有效处理移动设备（移动API）上的数据提供了机会。</p>
<p>SOAP 或者说“简单对象访问协议”，是⼀种⽤于构建 Web 通信的协议规范。它是W3C行业标准，使⽤XML作为底层互操作格式。SOAP 实现了⼀种有状态的消息传递，用于涉及多方的事务或者复杂的安全事务。它适用于HTTP、SMTP和FTP协议。SOAP与 WS-Security协议集成，通过额外的加密保证处理的事务的完整性和机密性[10]。由于使⽤XML，SOAP是最冗⻓的API样式。正因如此，XML交换格式使得SOAP难以成为一种通用架构风格。</p>
<p>SOAP的优点：</p>
<ul>
<li>有着使用各种传输协议的能力；</li>
<li>有着内置的错误处理（重传消息）；</li>
<li>安全性强；</li>
<li>信息格式详细（有着大量元数据）。</li>
</ul>
<p>SOAP的缺点：</p>
<ul>
<li>只支持单一的XML格式；</li>
<li>由于XML的格式冗杂，需要大的服务带宽；</li>
<li>需要深入了解协议和数据传输规则；</li>
<li>严格的方案减慢了消息中属性的添加和删除；</li>
<li>数据解析具有高复杂性。</li>
</ul>
<p>因此，SOAP 最常用于在公司内部或直接与客户之间提供可靠的访问。强大的安全功能也使SOAP成为企业和金融部门的首选。</p>
<p>REST（视图状态传输）是一种用于创建Web服务的API架构风格。它于2000年由HTTP协议的创始⼈之⼀Roy Fielding在博士论文[11]中提出。REST是⼀种简单的接口，用于传输不使用第三方软件层的信息。即在发送数据时，没有转换阶段，信息以原始形式传递，对客户端负载有好处，但对⽹络部分增加了负载。</p>
<p>其处理数据以JSON或XML格式组织。满足REST架构所有要求和条件的Web服务被称为RESTful Web服务。</p>
<p>RESTful 架构要求（字段约束）：</p>
<ul>
<li>不包含状态（无状态）：处理查询的状态只能在查询本身，所以服务器不存储任何会话信息。</li>
<li>具有缓存。</li>
<li>通用接口：允许与Web服务器进行一致的、独立于应用程序的交互。</li>
</ul>
<p>它还施加了许多子限制：通过其表示来操纵资源、识别资源、实现消息的“自给自足”、以超媒体方式工作。</p>
<ul>
<li>专注于客户端-服务器架构。</li>
<li>向客户端交付可执行代码的能力。</li>
<li>独立于应用程序的级别/层数。</li>
</ul>
<p>在REST中，所有的通信都基于HTTP⽅法的使⽤：GET、POST、PUT、PATCH和DELETE。</p>
<p>REST最常用作CRUD（创建、读取、更新、删除）的管理API，以在轻量级可扩展服务中实现与资源的交互。资源通常是数据模型对象或数据库表。</p>
<p>REST的优点：</p>
<ul>
<li>交互具有开放性；</li>
<li>实施简单；</li>
<li>HTTP级别的数据缓存；</li>
<li>使用多种格式的数据表示；</li>
<li>有着高度抽象带来的稳定性。</li>
</ul>
<p>REST的缺点：</p>
<ul>
<li>缺乏统一的标准化结构；</li>
<li>网络负载高；</li>
<li>信息过多或不足，可能导致需要发送额外的查询。</li>
</ul>
<p>在所有规范中，REST实现了最高级别的抽象，最适合开发更简单的CRUD API。它保持了可靠性和易用性的平衡。向客户端-服务器、无状态和缓存倾向（对于列出成就、排序和过滤很重要）的转变也是本文讨论的此服务的优势。与其他规范相⽐，较大的网络负载是由正在解决的问题的具体情况来决定的（有很低的概率一个学生会有数千个成就，并以数千个批次添加到平台上。同时，也没有开发单独的移动应用程序的计划）。 这就是REST构成了目前这个正在开发的项⽬原型的架构风格的基础的原因。</p>
<p>创建安全的RESTful API还提出了某些标准要求：</p>
<ul>
<li>使⽤HTTPS协议：需要加密操作以确保传输的完整性</li>
<li>速率限制：需要监控API上的负载。在过载情况下丢弃请求或连接其他系统以进行平衡。</li>
<li>身份验证：对用户/应用程序/设备进行识别。</li>
<li>审核日志：通过在日志文件中创建条目来记录操作。</li>
<li>访问权限控制（授权）：确定处理资源时的访问权限。</li>
<li>可以访问应用程序的业务逻辑。</li>
</ul>
<p>使用REST架构时，由于REST API是与Web应⽤程序进行⽹络交互的接口，所以习惯上区分两个安全级别：</p>
<ul>
<li>第一级：访问API；</li>
<li>第二级：直接访问应用程序。</li>
</ul>
<p>API级别的保护意味着对身份验证、授权、注册和访问权限分离以及适当组织。开发⼈员必须确保只有授权的客户端才能使用API并且只能访问授权的操作。</p>
<p>应用层安全包括服务端的漏洞检查：负责与界面交互的URL地址。<br />
OWASP（开放式Web应用程序安全项目）社区已经确定了（在各个级别）大约十个API开发漏洞。最危险的是：</p>
<ul>
<li>有损的对象级授权：没有分离和执行资源访问控制。</li>
<li>有损的用户认证：与用户身份认证有关的漏洞。</li>
<li>缺乏资源和速率限制：检查和限制不匹配。</li>
<li>功能级别授权失效：缺少访问控制。</li>
<li>批量作业：与接收对象反序列化相关的漏洞。</li>
<li>安全配置错误：使用应用程序安全设置时出错。</li>
<li>记录和监控不足：日志文件和系统监控缺乏或错误。</li>
</ul>
<p>首先，有必要关注与访问控制、身份验证和授权相关的问题[12]。按照设计，REST API 是无状态的，所以应该通过本地端点进行控制访问。<br />
有几种最常见的方法（身份验证方案）：基本身份验证、API密钥、JSON Web 令牌、OAuth 2.0、基于令牌的身份验证、基于Cookie的身份验证和OpenID。</p>
<p>基本身份验证（BA）是最简单的基于HTTP的身份验证方案。客户端或者应用程序形成一个HTTP查询，其标头包含“授权”字段。格式为Basic&lt;username:password&gt;（以Base64编码）的字符串作为该字段的值传递。为了确保数据的安全性和保密性，此基本验证方案（以及后续所有方案），始终需要使用安全的HTTPS/TLS协议[13]，因为用户ID和密码以Base64编码的纯文本（适合解码）进入了网络。</p>
<p>基于Cookie的身份验证是另一种基于检查cookie内容的方法，其中存储了有关会话的所有必要信息。用户发起登录请求。如果登录成功，服务器会发送一个响应，响应头包含Set-Cookies字段，包含cookie-field的名称、值、cookie过期时间等。下次用户需要访问API时，他将在请求头中传递保存的Cookie字段：JSESSIONID，作为键“Cookie”的值。</p>
<p>API Key，一种用户将其与请求一起传递给服务器的字符串形式的密钥。如果客户端的密钥包含在应用程序数据库中，服务器将会确认客户端的身份。密钥本身由应用程序在注册用户时发出。此方案用于防止未经授权的访问，并允许对API调用施加限制。API密钥可以通过以下方式传递：作为查询参数，在查询标头中，作为cookie值。</p>
<p>基于令牌的身份验证或承载身份的验证方案基于使用“服务器签名的令牌”。该令牌在认证查询标头发送到服务器。但是，与基本身份验证不同，“Basic”关键词被替换为“Bearer”：Authorization: Bearer&lt;token&gt;。服务器收到令牌后，进行验证（用户是否存在，是否有此令牌，有效期未过期等）。基于令牌的身份验证可以独立使用，如让服务器本身为新用户生成令牌，或者成为更复杂的身份验证机制的一部分，例如OAuth 2.0或者OpenID Connect。令牌和API Key的区别在于key只能提供对API方法的访问，而不能获取用户的个人数据。</p>
<p>JSON Web Tokens（JWT）是一种基于使用一种特殊类型的令牌：JWT令牌的身份验证机制。它是一个JSON数据结构。这样的令牌包含带有一般信息的标头，带有有效负载（用户ID、组、数据）的主体和加密签名。该方案是在两方之间传输数据的最安全的机制之一，因此它被认为是控制REST API访问的首选方法。使用API的用户在发送请求时，会将服务器先前发布的个人JWT添加到其中。</p>
<p>OAuth 2.0是负责用户授权的更复杂的协议。允许Web应用程序获取在其他服务上使用客户端资源的权限。这使得可以为第三方应用程序提供对用户受控资源的有限访问权限，而无需直接将登录名和密码传递给该应用程序。OAuth可以在任何平台上使用，因为该协议依赖于底层的Web技术栈，即HTTP查询、响应、URL重定向[14]等。</p>
<p>这种方法是最复杂的授权选项。只有在使用时，服务才能唯一标识请求授权的应用程序。否则，授权完全在客户端完成。在开发与第三方服务交互的REST API时，经常使用该模式。</p>
<p>OpenID是分散式身份验证方案的标准化方法。其一个显著的特点是能够通过中介服务创建单个账号，并且一次对多个服务进行身份验证（创建唯一的数字标识符）。在操作机制上，该方法与OAuth 2.0类似，但OpenID仅用于用户身份验证。新版本的OpenID Connection被转换为OAuth 2.0上的身份验证插件，获得了可靠的加密机制和数字签名。</p>
<p>本项目决定使用JWT作为开发应用程序的主要访问控制方案，因为该服务在工作中不使用第三方资源，并且此类令牌易于使用，具有方便的数据描述格式，不会造成不必要的网络负载。将HTTPS协议与加密签名结合使用可为服务提供最佳的保护级别。</p>
<p>在保护Web服务时，输入控制值得特别注意。你需要确保应用程序随后将要操作的所有数据都是有效并且符合API规范的。</p>
<p>开发者社区在验证输入数据时形成了一些建议：</p>
<ul>
<li>在客户端和服务端都进行数据验证；</li>
<li>不要使用你自己的验证机制，应该使用编程语言或者框架的内置函数；</li>
<li>始终需要检查查询的内容类型、大小和长度；</li>
<li>不要在后端创建对数据库的手动查询，只使用参数化查询；</li>
<li>在服务器上使用允许列表；</li>
<li>保留错误日志、尝试输入数据等。</li>
</ul>
<p>在开发REST API时，为后端选择正确的工具同样重要。Python编程语言早已在Web开发市场中确立了自己的地位。Python具有许多高质量的模块、包、框架和实用程序，极大地简化了开发过程。多年来，该行业开发了丰富的代码库和庞大的国际开发者社区。与之相关的一个重要因素是Python具有相对较低的学习曲线和简单的语法。这些内容导致了一个实事，那就是应用程序原型、概念验证和最小可行产品（MVP）的开发在Python中可以更快、最有效地完成。</p>
<p>在Python的生态系统中，有许多强大并且通用的框架可用于开发服务Web应用程序。Flask是最流行的API服务开发框架。</p>
<p>Flask是一个WSGI微框架，它提供最少的基本功能，并能够根据需要添加模块。由于模块化方法，程序员只会收集那些肯定会在项目开发中使用的工具[15]。架构的灵活性和大量现成扩展的存在使得在简单项目和复杂平台开发中都可以使用Flask。在开发者社区中，它经常被用来创建RESTful Web服务API。所有这些都成为了选择Flask作为开发应用程序原型的基础的决定性因素。</p>
<p>API Flask提供了许多可供加载的模块[16]：</p>
<ul>
<li>Flask-Login和Flask_simplelogin用于管理用户会话。注册、认证和授权机制被集成到这些扩展中。</li>
<li>Flask-WTF：用于创建安全表单（验证、csrf令牌等）的模块。</li>
<li>Flask_jwt：用于使用JWT身份验证方案的拓展。</li>
<li>Flask_restful/Flask_restplus：一组帮助和简化REST API开发的对象和函数。</li>
<li>Flask-Security：一个用于管理用户角色和组的包。</li>
</ul>
<p>许多已开发服务器的缺点是API本身的描述与特定语言或其框架的实现紧密相关[17]。开源工具Swagger就是用来解决这个问题的，并且创建了一个灵活统一的API。</p>
<p>Swagger是一个独立于编程语言和技术栈的框架，用于描述RESTful API的规范和文档。它允许通过具有yml或json扩展名的特殊文件[18]来配置REST API，而无需访问应用程序的源代码。在此文件的基础上还会自动生成一个文档包。</p>
<hr />
<h1 id="结果"><a class="markdownIt-Anchor" href="#结果"></a> 结果</h1>
<p>被用来进行开发的Web应用程序服务器对攻击者来说也是潜在的漏洞点。为了降低被黑客入侵的风险，我们需要通过编辑文件/etc/ssh/sshd_config来禁用linux服务器的root登录。在PermitRootLogin选项中，将值从yes更改为no。</p>
<p>下一步是防火墙的安装和配置。如果我们通过SSH使用服务器，则必须关闭对除80（HHTP）、443（HTTPS）和22之外的所有端口的访问：sudo ufw allow ssh http 443/tcp-force enable。</p>
<p>此外，你应该用更高级别的WSGI服务器gunicorn替换标准的Flask应用程序服务器。它是一个强大的生产服务器，许多开发人员在开发Python Web应用程序时将其作为标准。将服务配置为等待来自私有端口8000的查询：gunicorn -b localhost:8000 -w 4 restapiservice:app。这样，应用程序的网络流量只能通过防火墙上开放的端口80和443。同时，为了保证应用程序的安全，所有到达HTTP 80端口的流量都必须重定向到加密的443端口（HTTPS）。要使用HTTPS协议，你需要获取SSL安全证书（例如，Encrypt）：apt install python-certbot-nginx/sudo certbot -nginx -d &lt;application_domain&gt; -d www.&lt;aoolication_domain&gt;。</p>
<p>Nginx代理将用于重定向流量。监听端口设置、HTTPS连接和流量重定向是通过设置配置文件/etc/nginx/sites-enabled/default[19]来完成的。</p>
<p>默认的SQLite数据库也不是可接受的解决方案。该应用程序将使用可靠且高效的PostgreSQL DBMS，它是Python+Django/Flask技术栈上的一个标准。</p>
<p>然而，没有一个DBMS可以有效地为大量需要它的独立进程提供服务。过多的查询（来自真实用户或者由入侵者创建的）将会导致数据库出错。为了解决这个问题，我们将使用PgBouncer连接拉取器。该拉取器以小块代理所有传入的查询，创建专门的查询队列。</p>
<p>在开发Web应用程序初期，需要注意存储机密应用程序数据的形式：密钥、地址、数据库密码等。最简单、最可靠的选择是使用环境变量。程序员创建一个bat/bash脚本，当它在服务器上启动时，会将必要的数据写入当前的环境变量中。之后，你可以使用python的os模块来读取所需的信息并且配置你的Flask应用程序。通过这种方案，秘密数据就不会被公开在代码中。</p>
<p>当创建用户模型时，很重要的一点是要注意“密码”字段的工作。密码不应显式存储在数据库中。处于安全原因，用于记录和比较密码的不是密码本身，而是它们的哈希值。为此，在User模型的set_password和check_password方法中，我们将使用安全包中的功能：generate_password_hash和check_password_hash。</p>
<p>接下来，我们看看负责添加新成就的方法。在这种情况下，用户必须获得授权。</p>
<p>获取模型的字段内容应该通过调用get方法来完成，在没有对应字段的情况下，将变量的值设置为None。另外，为了保证安全，对数据库的操作是通过内置的ORM对象进行的，而不是直接SQL查询。</p>
<p>API查询规范本身的描述、处理程序的设置和安全限制都移到了swagger.yml文件中。在此文件中，你需要指定应用程序将要使用的身份验证方案，以及包含此方案在Python中实现的特殊函数。对于待开发的Web服务，处理方案程序（jwt_auth函数）位于单独的auth.py文件中。</p>
<p>在 swagger.yml 文件中，对 API 的每一个查询都由一个单独的块表示，其中包含声明方案的所有服务选项。在规范块中，你必须指定：URL路由、HTTP查询类型、来自API的响应描述（状态代码、错误消息等）和身份验证方案。</p>
<p>添加成就的规范说明如图1所示：</p>
<p><img src="../images/pasted-8.png" alt="upload successful" /></p>
<p>现在，当尝试使用API POST请求/achievement时，系统就会要求用户登录（图2）：</p>
<p><img src="../images/pasted-9.png" alt="upload successful" /></p>
<p>其余的API方法以相同的方式创建。</p>
<p>在完成保护服务器端的所有过程后，你还必须考虑与保护应用程序客户端相关的一些注意事项。</p>
<p>以这种方式开发和配置Web应用程序可以关闭大部分的前端/后端漏洞，并允许客户端安全地使用服务端的所有功能。</p>
<hr />
<h1 id="讨论"><a class="markdownIt-Anchor" href="#讨论"></a> 讨论</h1>
<p>保护Web应用程序的基本规则和建议是在数千名程序员的商业开发的经验中形成的。这些是社区普遍接受的规范。这些标准是工程师、软件测试人员和DevOps工程师所依赖的关键点。而在选择用于开发Web应用程序的具体技术栈时，会出现更多争议。</p>
<p>2018年，Sebastian Ramirez开发了一个名为FastAPI的Python Web框架。在他看来，FastAPI应该已经成为开发REST API服务的最佳框架以及一个比Flask性能更好的类似框架。Rajmirez的框架是完全异步的，并且很容易与OpenAPI-schema集成，这使得使用Swagger和ReRoc更人容易。尽管在市场上的时间相对较短，但FastAPI将自己确立为一个高质量工具。许多大公司开始使用它来开发他们的API。因此，在GitHub上的项目讨论中，微软首席工程师Khan Kabir发表了以下评论：“我最近几天经常使用FastAPI。我绝对打算将它用在我在微软团队中的所有ML服务中。”</p>
<p>此外，作为Flask的代替方案，许多开发人员建议考虑另一个相对“年轻”的框架：Sanic。它也被认为是Flask的多线程、异步分析。它是一个具有模块化结构和许多特性的微框架，例如静态文件的基本路由、用于创建CRUD的特殊扩展、非阻塞操作机制等。</p>
<p>由于其为解释型语言，Python也因其相对较差的性能而受到一些开发人员的批评。作为代替方案，谷歌工程师提供了他们自己开发的Golang编程语言。它的主要优点是强类型、编译期检查以及线程的有效模拟goroutine。此外，Go在开发Web应用程序时提供了使用静态类型的能力，这使得将来测试和维护产品变得更加容易。</p>
<hr />
<h1 id="结论"><a class="markdownIt-Anchor" href="#结论"></a> 结论</h1>
<p>综上所述，API已经成为现代Web和移动应用程序开发的关键要素。它们允许组织与应用程序、服务和软件平台的交互。由于其多功能性和易用性，REST架构风格的接口约占所有公共和专有API的80%。</p>
<p>在研究过程中，我们开发了受保护的RESTful API Web服务的原型，借助该原型，学生能够跟踪个人在教育、科学、创意、社交和体育活动中的个人成就。Python编程语言及其Flask Web微框架显著提高了MVP开发的效率、质量和速度，同时，Swagger框架也使得开发REST API从技术栈中独立出来成为可能。</p>
<p>该项目通过添加新功能，将使用的数据库替换为更灵活的No-SQL面向文档的版本（例如MongoDB）、基于内存Redis数据库实现高级缓存、授权等方式，具有通过社交网络的高扩展潜力。此外，它还可以切换到更高效的异步后端框架，细化和优化应用客户端的UX/UI。</p>
<hr />
<h1 id="参考文献"><a class="markdownIt-Anchor" href="#参考文献"></a> 参考文献</h1>
<p>[1]	Kornienko D V, Shcherbatykh S V, Mishina S V and Popov S E 2020 The effectiveness of the pedagogical conditions for organizing the educational process using distance educational technologies at the university J. Phys.: Conf.Ser. 1691(1) 012090</p>
<p>[2]	Kornienko D V 2020 Organization of a system of digital education practices in the municipal sphere of general education J. Phys. Conf. Ser. 1691(1) 012108</p>
<p>[3]	Shcherbatykh S V and Mishina S V 2019 Development of professionally significant qualities of future economists by means of the hidden curriculum Desarrollo de cualidades profesionalmente significativas de futuros economistas mediante el currículum oculto Utopia y Praxis Latinoamericanat 24(Extra6) 387-95</p>
<p>[4]	Mishina S V 2020 Strategies for students’ lean competencies formation in the educational process of the university J. Phys.: Conf. Ser. 1691(1) 012213</p>
<p>[5]	Shevat A, Jin B and Sahni S Designing 2018 Web APIs: Building APIs That Developers Love (United States: O’Reilly Media)</p>
<p>[6]	Jiao J, Yang Y, Feng B, Wu S, Li Y and Zhang Q 2017 Distributed rateless codes with unequal error protection property for space information networks Entropy 19(1) 38</p>
<p>[7]	Abbaspour E, Fani B and Heydarian-Forushani E 2019 A bi-level multi agent-based protection scheme for distribution networks with distributed generation Int. Jour. of Electrical Power and Energy Systems 112 209-20</p>
<p>[8]	Cong W, Zheng Y, Zhang Z, Kang Q and Wang X 2017 Distributed Storage and Management Method for Topology Information of Smart Distribution Network Dianli Xitong Zidonghua Automation of Electric Power Systems 41(13) 111-8</p>
<p>[9]	Bonér J 2016 Reactive Microservices Architecture: Design Principles for Distributed Systems (United States: O’Reilly Media)</p>
<p>[10]	Song X, Zhang Y, Zhang S, Song S, Ma J and Zhang W 2018 Active distribution network protection mode based on coordination of distributed and centralized protection Proc. of 2017 China Int. Electrical and Energy Conf. 180-3</p>
<p>[11]	Fielding R 2000 Architectural Styles and the Design of Network-based Software Architectures (California: University of California)</p>
<p>[12]	Tong B B, Zou G B and Shi M L 2013 A distributed protection and control scheme for distribution network with DG Advanced Materials Research 732-3 628-33</p>
<p>[13]	Zhong S, Liu C, Yang Z and Yan D 2009 Privacy protection model for distributed service system in converged network Int. Conf. on E-Business and Information System Security ( Piscataway: Institute of Electrical and Electronics Engineers)</p>
<p>[14]	Maximov R V, Ivanov I I and Sharifullin S R 2017 Network topology masking in distributed information systems CEUR Workshop Proc. 2081 83-7</p>
<p>[15]	Grinberg M 2016 Development of web applications using Flask in Python (Moscow: DMK Press)</p>
<p>[16]	Dwyer G 2016 Flask By Example (UK: Pack Publishing Ltd)</p>
<p>[17]	Percival G 2018 Development based on testing (Moscow: DMK Press)</p>
<p>[18]	Swagger Retrieved from: <a href="https://swagger.io" target="_blank" rel="noopener">https://swagger.io</a></p>
<p>[19]	Melnikov M O and Igonina E V 2021 Configuring a Debian server for developing Python and Django web applications Modern Science 2(2) 389-98</p>
]]></content>
      <categories>
        <category>理论学习</category>
      </categories>
      <tags>
        <tag>Web</tag>
        <tag>文献</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>【模板】二分答案（3个）</title>
    <url>/%E3%80%90%E6%A8%A1%E6%9D%BF%E3%80%91%E4%BA%8C%E5%88%86%E7%AD%94%E6%A1%88%EF%BC%883%E4%B8%AA%EF%BC%89/</url>
    <content><![CDATA[<p>其实二分答案思路很简单。。。本不应该有这篇文章的，可是在做题的时候发现还是有一些细节，时间长了容易忘记，所以还是写了这篇文章，方便后续查找。</p>
<h1 id="整数二分"><a class="markdownIt-Anchor" href="#整数二分"></a> 整数二分</h1>
<h2 id="求较大区间的最小临界值"><a class="markdownIt-Anchor" href="#求较大区间的最小临界值"></a> 求较大区间的最小临界值</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> (l &lt; r)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> mid = (l + r) / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span> (check(mid))</span><br><span class="line">    &#123;</span><br><span class="line">        r = mid;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        l = mid + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> ans = l;</span><br></pre></td></tr></table></figure>
<h2 id="求较小区间的最大临界值"><a class="markdownIt-Anchor" href="#求较小区间的最大临界值"></a> 求较小区间的最大临界值</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> (l &lt; r)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> mid = (l + r + <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span> (check(mid))</span><br><span class="line">    &#123;</span><br><span class="line">        l = mid;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        r = mid - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> ans = l;</span><br></pre></td></tr></table></figure>
<h1 id="浮点二分"><a class="markdownIt-Anchor" href="#浮点二分"></a> 浮点二分</h1>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> (<span class="built_in">fabs</span>(r - l) &gt; eps)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">double</span> mid = (l + r) / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span> (check(mid))</span><br><span class="line">    &#123;</span><br><span class="line">        r = mid;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        l = mid;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> ans = l;</span><br></pre></td></tr></table></figure>
<p>主要的要点就是在整数二分的时候，都是令else的部分多加一个或者多减一个（至于是l还是r、加还是减可以通过语义判断），如果是下半区间的话，计算mid时需要上取整。</p>
<p>浮点二分基本上随便写了，注意用精度比较即可。</p>
]]></content>
      <categories>
        <category>理论学习</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>模板</tag>
      </tags>
  </entry>
  <entry>
    <title>多线程release模式下访问同一个变量出错</title>
    <url>/%E5%A4%9A%E7%BA%BF%E7%A8%8Brelease%E6%A8%A1%E5%BC%8F%E4%B8%8B%E8%AE%BF%E9%97%AE%E5%90%8C%E4%B8%80%E4%B8%AA%E5%8F%98%E9%87%8F%E5%87%BA%E9%94%99/</url>
    <content><![CDATA[<h1 id="问题"><a class="markdownIt-Anchor" href="#问题"></a> 问题</h1>
<p>在和队友一起调试项目时，队友在项目的某一个地方用到了多线程，主要是为了在保证主线程正常运行的情况下检测一个鼠标的点击事件，通过对于一个flag变量的判断从而进行暂停的功能。但是我在pull项目后本地调试时，却发现这个暂停点了之后可以暂停，可是再点继续的时候却无法继续，但是去询问队友他本地却运行正常。</p>
<hr />
<h1 id="解决"><a class="markdownIt-Anchor" href="#解决"></a> 解决</h1>
<p>后来发现队友那边是使用的是debug模式，而我这里运行时使用的是release模式，可以看出又是一些ub行为导致的问题。<br />
最后查阅了相关资料等等，发现了问题产生的原因是release模式下对于变量的存储进行了优化，因为程序本来是在点击暂停之后一直检测flag变量isPause是否为否，而由于该变量被频繁访问，所以可能会被优化到CPU中存储（register），这就导致了子线程对其的修改失效了，两者修改检测的不是同一个变量，所以导致了暂停后不能继续的bug。<br />
解决方法就是通过volatile关键词进行修饰，避免被优化。<br />
在多线程中若想通过一个公共的flag变量进行线程间的通信，记得要进行volatile修饰，避免编译器的优化。<br />
<img src="../images/pasted-0.png" alt="upload successful" /></p>
<hr />
<h1 id="后续更新"><a class="markdownIt-Anchor" href="#后续更新"></a> 后续更新</h1>
<p>后面了解到volatile其实不是很适用在这种场景里面（虽说在整个项目里面确实能够达到目的）。实际上更科学的做法是应该使用mutex或者atomic，尤其是在学习了操作系统之后，更是意识到对于这种共享资源，应该进行加锁，pv操作进行处理。同时，c++11也为我们提供了原子（atomic）数据类型，能够正确实现对于共享资源变量的访问，并且相比于加锁操作能够提高相当高的效率。而volatile貌似现在更多用于硬件、单片机层面（？</p>
]]></content>
      <categories>
        <category>技术实践</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>编译优化</tag>
      </tags>
  </entry>
  <entry>
    <title>同济大学20年网络赛题解（部分）</title>
    <url>/%E5%90%8C%E6%B5%8E%E5%A4%A7%E5%AD%A620%E5%B9%B4%E7%BD%91%E7%BB%9C%E8%B5%9B%E9%A2%98%E8%A7%A3%EF%BC%88%E9%83%A8%E5%88%86%EF%BC%89/</url>
    <content><![CDATA[<p>20年网络赛题解，有些题太菜了都还没有看，所以就不补了（哭），主要是补前六道题</p>
<hr />
<h1 id="a张老师和菜哭武的游戏"><a class="markdownIt-Anchor" href="#a张老师和菜哭武的游戏"></a> <a href="https://acm.tongji.edu.cn/problem.php?id=1201" target="_blank" rel="noopener">A.张老师和菜哭武的游戏</a></h1>
<h2 id="题目描述"><a class="markdownIt-Anchor" href="#题目描述"></a> 题目描述</h2>
<p>天才程序员菜哭武和张老师有一天到一个城市旅游，旅途中菜哭武觉得无聊就想和张老师玩一个游戏。菜哭武有n个石子，每个石子都标有1到n之间的数，且各不相同，一开始他们会随机从这堆石子选一个石子放置到一个集合中，张老师选的数是a，菜哭武选的是b（a和b不相同）。接下来菜哭武和张老师轮流按照如下规则拿走一个石子：当石子x能被拿走时，当且仅当集合存在y和z，满足x等于y+z或者y-z，当x被拿走时，把它放到集合中。谁完成最后一轮操作时，谁获胜。张老师总是先手，于是张老师就好奇当决定好a和b时，他是否总是能获胜，你能帮助一下张老师吗？</p>
<h2 id="输入"><a class="markdownIt-Anchor" href="#输入"></a> 输入</h2>
<p>第一行一个整数T（1≤T≤500），表示共有T组测试数据<br />
对于每组测试数据，第一行三个整数n（2≤n≤20000）、a和b（1≤a,b≤n,a≠b）</p>
<h2 id="输出"><a class="markdownIt-Anchor" href="#输出"></a> 输出</h2>
<p>若张老师能获胜输出Yes，反之No</p>
<h2 id="样例输入"><a class="markdownIt-Anchor" href="#样例输入"></a> 样例输入</h2>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">16</span><br><span class="line">2 1 2</span><br><span class="line">3 1 3</span><br><span class="line">67 1 2</span><br><span class="line">100 1 2</span><br><span class="line">8 6 8</span><br><span class="line">9 6 8</span><br><span class="line">10 6 8</span><br><span class="line">11 6 8</span><br><span class="line">12 6 8</span><br><span class="line">13 6 8</span><br><span class="line">14 6 8</span><br><span class="line">15 6 8</span><br><span class="line">16 6 8</span><br><span class="line">1314 6 8</span><br><span class="line">1994 1 13</span><br><span class="line">1994 7 12</span><br></pre></td></tr></table></figure>
<h2 id="样例输出"><a class="markdownIt-Anchor" href="#样例输出"></a> 样例输出</h2>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">No</span><br><span class="line">Yes</span><br><span class="line">Yes</span><br><span class="line">No</span><br><span class="line">No</span><br><span class="line">No</span><br><span class="line">Yes</span><br><span class="line">Yes</span><br><span class="line">No</span><br><span class="line">No</span><br><span class="line">Yes</span><br><span class="line">Yes</span><br><span class="line">No</span><br><span class="line">Yes</span><br><span class="line">No</span><br><span class="line">No</span><br></pre></td></tr></table></figure>
<h2 id="思路"><a class="markdownIt-Anchor" href="#思路"></a> 思路</h2>
<p>一开始做这道题的时候其实是没有什么思路的，所以就先跳过了，后面第三道才开始看这道题，其实这是一道还蛮典型的裴蜀定理的题目。<br><br />
首先，我们可以按照这个题目模拟一下，一开始谁选a，选b无所谓，反正集合里是有a，b两个数，之后我们考虑一下他们能组成的其他可以入选的数字有谁，可以发现有：a-b，a+b，b-a。<br><br />
现在集合里有这5个数啦，然后我们接着考虑这5个数能组成的其他数，可以发现在这个衍生过程中，a+b可以加b，再加b，也可以加a，再加a，同理，减法也是一样的，也就是说，在给定a，b后，剩下可以拿到的数是所有任意个a与任意个b的线性组合，即可以取到的数p，需要满足p=xa+yb，由裴蜀定理可知，该方程有解一定有p为gcd(a,b)的整数倍。即可取到的数为gcd(a,b)，2*gcd(a,b)，一直到给定的最大数n为止。</p>
<p>由于张老师始终是先手，故张老师一定是取的奇数位的数字，即取第1个数字，第3个数字等等（要不要减去一开始放进去的两个数都一样，因为只需要判断奇偶性），因此只需要判断能取到的数的个数的奇偶，即n/gcd(a,b)的奇偶就可以。</p>
<p>另：我们也考虑最小的数，该数显然需要大于等于1，然后可以发现是取a-b，b-a，a-2b…中的最小值，发现这和辗转相除法很像，最小的数应该是gcd(a,b)，之后其他的数每次最小加减一个gcd(a,b)，所以可以发现其他的数都是gcd(a,b)的倍数，这样半猜的方式也能得到答案。</p>
<h2 id="代码"><a class="markdownIt-Anchor" href="#代码"></a> 代码</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line">    <span class="keyword">int</span> a, b, n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; t; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; a &gt;&gt; b;</span><br><span class="line">        <span class="keyword">int</span> gcd=__gcd(a,b);</span><br><span class="line">        <span class="keyword">int</span> ans=n/gcd;</span><br><span class="line">        <span class="keyword">if</span>(ans%<span class="number">2</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"Yes"</span>&lt;&lt;<span class="string">'\n'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"No"</span>&lt;&lt;<span class="string">'\n'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />
<h1 id="b伤害计算"><a class="markdownIt-Anchor" href="#b伤害计算"></a> <a href="https://acm.tongji.edu.cn/problem.php?id=1203" target="_blank" rel="noopener">B.伤害计算</a></h1>
<h2 id="题目描述-2"><a class="markdownIt-Anchor" href="#题目描述-2"></a> 题目描述</h2>
<p>勇士菜哭武获得了一把新的武器，武器有特殊的伤害计算方式。武器的伤害计算方式由若干个部分的和组成，用+号连接。每一部分可以是一个整数a，或者是一个公式ndx。其中a表示固定伤害a点；ndx表示掷n个x面骰子，伤害是所有骰子点数的和。总伤害是每一部分伤害的和。<br />
比如2d6+1d70+3，表示掷两个6面骰子和一个70面骰子（不一定实际存在70面骰子，可以理解成1到70当中随机选择一个整数），再加上固定伤害3点。<br />
他正准备挑选一把好武器，需要计算新武器的伤害期望值，想让你帮他计算一下。</p>
<h2 id="输入-2"><a class="markdownIt-Anchor" href="#输入-2"></a> 输入</h2>
<p>输入一个字符串，表示伤害计算公式。字符串长度不超过5000，对于每一个部分，1≤a, n, x ≤1000。a,n,x都是整数。</p>
<h2 id="输出-2"><a class="markdownIt-Anchor" href="#输出-2"></a> 输出</h2>
<p>输出一个数，表示伤害的期望值。如果不是整数，小数点后位数保留最少，即最终结果只有可能是整数或者小数点后是.5的形式，如果不是整数，那么保留一位小数。</p>
<h2 id="样例输入-2"><a class="markdownIt-Anchor" href="#样例输入-2"></a> 样例输入</h2>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1d6+1d70+1d10+6</span><br></pre></td></tr></table></figure>
<h2 id="样例输出-2"><a class="markdownIt-Anchor" href="#样例输出-2"></a> 样例输出</h2>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">50.5</span><br></pre></td></tr></table></figure>
<h2 id="思路-2"><a class="markdownIt-Anchor" href="#思路-2"></a> 思路</h2>
<p>字符串解析，也是我的第一道题，对于一个n点的骰子，一共有n种等概率的取法，每种的值依次是1，2…n。因此期望为</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mrow><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></munderover><mi>n</mi></mrow><mi>n</mi></mfrac><mo>=</mo><mfrac><mn>1</mn><mi>n</mi></mfrac><mo>∗</mo><mfrac><mrow><mi>n</mi><mo>∗</mo><mo stretchy="false">(</mo><mi>n</mi><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><mn>2</mn></mfrac><mo>=</mo><mfrac><mrow><mi>n</mi><mo>+</mo><mn>1</mn></mrow><mn>2</mn></mfrac></mrow><annotation encoding="application/x-tex">\frac{\sum_{i=1}^nn}{n}=\frac{1}{n}*\frac{n*(n+1)}{2}=\frac{n+1}{2}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.180002em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.494002em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">n</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.6897100000000003em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.804292em;"><span style="top:-2.40029em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.2029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.29971000000000003em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.00744em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">n</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:2.113em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.427em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.00744em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p>
<p>故对xdy来说，其值应该表示为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi><mo>∗</mo><mfrac><mrow><mi>y</mi><mo>+</mo><mn>1</mn></mrow><mn>2</mn></mfrac></mrow><annotation encoding="application/x-tex">x*\frac{y+1}{2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.46528em;vertical-align:0em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.242216em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.897216em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.446108em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span>，对于单独数字直接加上即可。</p>
<p>需要注意的是，首先，在多次浮点计数时可能产生误差，导致输出值不是.5，需要自己处理一下，另外，<strong>浮点大数在输出时，很容易输出成科学计数法的形式，导致结果的格式不对</strong>，自己就是一开始因为这个WA了三次，貌似之前也被这个东西坑过，今后也一定要注意，要转换成整数输出。题解的话是直接乘二倍判断奇偶输出.5，从而避免了浮点输出的问题，也是很聪明的做法。</p>
<h2 id="代码-2"><a class="markdownIt-Anchor" href="#代码-2"></a> 代码</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">string</span> st;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; st;</span><br><span class="line">    <span class="keyword">double</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> n1 = <span class="number">0</span>, n2 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> flag = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; (<span class="keyword">int</span>)st.size(); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (st[i] == <span class="string">'+'</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (flag == <span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                ans += n1;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (flag == <span class="number">2</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                ans += n1 * (n2 + <span class="number">1</span>) / <span class="number">2.0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            n1 = n2 = <span class="number">0</span>;</span><br><span class="line">            flag = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">isdigit</span>(st[i]))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (flag == <span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                n1 *= <span class="number">10</span>;</span><br><span class="line">                n1 += st[i] - <span class="string">'0'</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (flag == <span class="number">2</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                n2 *= <span class="number">10</span>;</span><br><span class="line">                n2 += st[i] - <span class="string">'0'</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (st[i] == <span class="string">'d'</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            flag = <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (flag == <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        ans += n1;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (flag == <span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        ans += n1 * (n2 + <span class="number">1</span>) / <span class="number">2.0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">fabs</span>(ans - (<span class="keyword">long</span> <span class="keyword">long</span>)(ans) - <span class="number">0.5</span>) &lt; <span class="number">1e-1</span>)</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; (<span class="keyword">long</span> <span class="keyword">long</span>)(ans) &lt;&lt; <span class="string">'.'</span> &lt;&lt; <span class="number">5</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; (<span class="keyword">long</span> <span class="keyword">long</span>)ans;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />
<h1 id="c张老师的旅行"><a class="markdownIt-Anchor" href="#c张老师的旅行"></a> <a href="https://acm.tongji.edu.cn/problem.php?id=1202" target="_blank" rel="noopener">C.张老师的旅行</a></h1>
<h2 id="题目描述-3"><a class="markdownIt-Anchor" href="#题目描述-3"></a> 题目描述</h2>
<p>张老师到了一个王国去旅游，王国有n个景点，张老师到达这个城市所在的车站恰好位于第x个景点，这个王国非常特别，恰好所有著名的景点都在分布在直线上，每个景点在坐标pi上(单位：公里)，张老师身体非常好，每走一公里花费一分钟。每个景点都有一个打卡点，并且必须在不迟于相应的时间（时间从张老师到达王国开始计算）前到达才能打卡成功并且给以一个打卡标记，集齐所这些标记就能获得一个大礼包。由于张老师非常想要大礼包，并且因为张老师还着急去下一个王国旅游，所以张老师希望用的时间尽量少，你能帮帮张老师吗？</p>
<h2 id="输入-3"><a class="markdownIt-Anchor" href="#输入-3"></a> 输入</h2>
<p>输入的第一行，包含一个整数n（1≤n≤1000）<br />
第二行包含n个整数pi(1≤pi≤100000)，第i个整数pi为第i个景点的坐标（坐标从小到大排列）<br />
最后一行包含n个整数ti(0≤ti≤10,000,000)，ti表示第i个景点最迟到达的时间，时间为0则表示张老师所在车站的位置且只有一个为0</p>
<h2 id="输出-3"><a class="markdownIt-Anchor" href="#输出-3"></a> 输出</h2>
<p>输出所需的最少时间，若无解输出-1</p>
<h2 id="样例输入-3"><a class="markdownIt-Anchor" href="#样例输入-3"></a> 样例输入</h2>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">4</span><br><span class="line">1 2 3 4</span><br><span class="line">0 1 2 3</span><br></pre></td></tr></table></figure>
<h2 id="样例输出-3"><a class="markdownIt-Anchor" href="#样例输出-3"></a> 样例输出</h2>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">3</span><br></pre></td></tr></table></figure>
<h2 id="思路-3"><a class="markdownIt-Anchor" href="#思路-3"></a> 思路</h2>
<p>首先，我们遇到这种题肯定先考虑贪心，考虑优先去ddl近的？貌似保证不了时间最短，考虑去最近的？貌似不能保证ddl。其实不难发现这是个多要素的最优化问题，而且观察一下数据范围，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><msup><mn>0</mn><mn>3</mn></msup></mrow><annotation encoding="application/x-tex">10^3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span></span></span></span>，看起来是个<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\Omicron(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathrm">O</span></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>的算法，其实就不难想到应该去用动态规划求解。（比赛时也没有想到，还是做的题太少了）。</p>
<p>接下来我们考虑一下怎么dp，（参照了题解的做法，不过题解说的好简短）我们可以定义状态<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mi>p</mi><mo stretchy="false">[</mo><mi>l</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>r</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>x</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">dp[l][r][x]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathdefault">x</span><span class="mclose">]</span></span></span></span>，表示走完第l个景点到第r个景点这个区间内的所有节点的最短时间，x=0表示停在第l个景点，x=1表示停在第r个景点，因为要走过一个区间内的所有景点，最短的走法一定是会停在边界，这个就不说明了，可以想一想。</p>
<p>对于这个状态我们来进行分析对于一段区间l-r，我们想要继续拓展周围的节点，很显然的只能去拓展l-1或者r+1号景点，如果去拓展l-1号景点，那么最优的情况一定是停在l-1号景点。从l-r推到(l-1)-r，我们需要考虑他是从第l号景点走过来，还是从第r号景点走过来，因为第l号景点走过来虽然近，但是可能<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mi>p</mi><mo stretchy="false">[</mo><mi>l</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>r</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mn>0</mn><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">dp[l][r][0]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord">0</span><span class="mclose">]</span></span></span></span>的值要比<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mi>p</mi><mo stretchy="false">[</mo><mi>l</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>r</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mn>1</mn><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">dp[l][r][1]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord">1</span><span class="mclose">]</span></span></span></span>的值大，所以我们需要取它们的最小值。从l号景点走过来的距离是<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>p</mi><mo stretchy="false">[</mo><mi>l</mi><mo stretchy="false">]</mo><mo>−</mo><mi>p</mi><mo stretchy="false">[</mo><mi>l</mi><mo>−</mo><mn>1</mn><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">p[l]-p[l-1]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">]</span></span></span></span>，从r号景点走过来的距离是<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>p</mi><mo stretchy="false">[</mo><mi>r</mi><mo stretchy="false">]</mo><mo>−</mo><mi>p</mi><mo stretchy="false">[</mo><mi>l</mi><mo>−</mo><mn>1</mn><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">p[r]-p[l-1]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">]</span></span></span></span>，注意题目告诉的是坐标轴坐标，距离需要去减一下，所以向左递推的方程为</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mi>p</mi><mo stretchy="false">[</mo><mi>l</mi><mo>−</mo><mn>1</mn><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>r</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mn>0</mn><mo stretchy="false">]</mo><mo>=</mo><mi>m</mi><mi>i</mi><mi>n</mi><mo stretchy="false">(</mo><mi>d</mi><mi>p</mi><mo stretchy="false">[</mo><mi>l</mi><mo>−</mo><mn>1</mn><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>r</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mn>0</mn><mo stretchy="false">]</mo><mo separator="true">,</mo><mi>d</mi><mi>p</mi><mo stretchy="false">[</mo><mi>l</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>r</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mn>0</mn><mo stretchy="false">]</mo><mo>+</mo><mi>p</mi><mo stretchy="false">[</mo><mi>l</mi><mo stretchy="false">]</mo><mo>−</mo><mi>p</mi><mo stretchy="false">[</mo><mi>l</mi><mo>−</mo><mn>1</mn><mo stretchy="false">]</mo><mo separator="true">,</mo><mi>d</mi><mi>p</mi><mo stretchy="false">[</mo><mi>l</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>r</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mn>1</mn><mo stretchy="false">]</mo><mo>+</mo><mi>p</mi><mo stretchy="false">[</mo><mi>r</mi><mo stretchy="false">]</mo><mo>−</mo><mi>p</mi><mo stretchy="false">[</mo><mi>l</mi><mo>−</mo><mn>1</mn><mo stretchy="false">]</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">dp[l-1][r][0]=min(dp[l-1][r][0],dp[l][r][0]+p[l]-p[l-1],dp[l][r][1]+p[r]-p[l-1])
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord">0</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">m</span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span><span class="mopen">(</span><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord">0</span><span class="mclose">]</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord">0</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">]</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord">1</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">]</span><span class="mclose">)</span></span></span></span></span></p>
<p>向右递推同理，注意这次最优一定是恰好走到r+1号景点，所以此时x=1，注意一些细节的调整，方程为</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mi>p</mi><mo stretchy="false">[</mo><mi>l</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>r</mi><mo>+</mo><mn>1</mn><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mn>1</mn><mo stretchy="false">]</mo><mo>=</mo><mi>m</mi><mi>i</mi><mi>n</mi><mo stretchy="false">(</mo><mi>d</mi><mi>p</mi><mo stretchy="false">[</mo><mi>l</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>r</mi><mo>+</mo><mn>1</mn><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mn>1</mn><mo stretchy="false">]</mo><mo separator="true">,</mo><mi>d</mi><mi>p</mi><mo stretchy="false">[</mo><mi>l</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>r</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mn>0</mn><mo stretchy="false">]</mo><mo>+</mo><mi>p</mi><mo stretchy="false">[</mo><mi>r</mi><mo>+</mo><mn>1</mn><mo stretchy="false">]</mo><mo>−</mo><mi>p</mi><mo stretchy="false">[</mo><mi>l</mi><mo stretchy="false">]</mo><mo separator="true">,</mo><mi>d</mi><mi>p</mi><mo stretchy="false">[</mo><mi>l</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>r</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mn>1</mn><mo stretchy="false">]</mo><mo>+</mo><mi>p</mi><mo stretchy="false">[</mo><mi>r</mi><mo>+</mo><mn>1</mn><mo stretchy="false">]</mo><mo>−</mo><mi>p</mi><mo stretchy="false">[</mo><mi>r</mi><mo stretchy="false">]</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">dp[l][r+1][1]=min(dp[l][r+1][1],dp[l][r][0]+p[r+1]-p[l],dp[l][r][1]+p[r+1]-p[r])
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord">1</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">m</span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span><span class="mopen">(</span><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord">1</span><span class="mclose">]</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord">0</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mclose">]</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord">1</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mclose">]</span><span class="mclose">)</span></span></span></span></span></p>
<p>所以，最后的结果就是<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>m</mi><mi>i</mi><mi>n</mi><mo stretchy="false">(</mo><mi>d</mi><mi>p</mi><mo stretchy="false">[</mo><mn>1</mn><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>n</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mn>0</mn><mo stretchy="false">]</mo><mo separator="true">,</mo><mi>d</mi><mi>p</mi><mo stretchy="false">[</mo><mn>1</mn><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>n</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mn>1</mn><mo stretchy="false">]</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">min(dp[1][n][0],dp[1][n][1])</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">m</span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span><span class="mopen">(</span><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord">1</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathdefault">n</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord">0</span><span class="mclose">]</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord">1</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathdefault">n</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord">1</span><span class="mclose">]</span><span class="mclose">)</span></span></span></span>。</p>
<p>得到了递推方程，接下来我们考虑一下代码怎么写，这也是我看了题解以后纠结了半天的地方，我们发现，这个递推方程，是从中间，向左推，又向右推，所以不能直接暴力上个二重循环，写代码时需要保证递推时的式子是前面已经得到的。</p>
<p>首先，我们可以找到时间为0的位置init_poi（简称ip），表示这是起点，之后，我们可以从这个起点，向右递推，向左递推，即计算<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mi>p</mi><mo stretchy="false">[</mo><mi>i</mi><mi>p</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>i</mi><mi>p</mi><mo>+</mo><mn>1</mn><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mn>1</mn><mo stretchy="false">]</mo><mi mathvariant="normal">，</mi><mi>d</mi><mi>p</mi><mo stretchy="false">[</mo><mi>i</mi><mi>p</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>i</mi><mi>p</mi><mo>+</mo><mn>2</mn><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mn>1</mn><mo stretchy="false">]</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi>d</mi><mi>p</mi><mo stretchy="false">[</mo><mi>i</mi><mi>p</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>n</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mn>1</mn><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">dp[ip][ip+1][1]，dp[ip][ip+2][1]...dp[ip][n][1]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mord mathdefault">p</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mord mathdefault">p</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord">1</span><span class="mclose">]</span><span class="mord cjk_fallback">，</span><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mord mathdefault">p</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mord mathdefault">p</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">2</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord">1</span><span class="mclose">]</span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mord mathdefault">p</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathdefault">n</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord">1</span><span class="mclose">]</span></span></span></span>以及<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mi>p</mi><mo stretchy="false">[</mo><mi>i</mi><mi>p</mi><mo>−</mo><mn>1</mn><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>i</mi><mi>p</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mn>0</mn><mo stretchy="false">]</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi>d</mi><mi>p</mi><mo stretchy="false">[</mo><mn>1</mn><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>i</mi><mi>p</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mn>0</mn><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">dp[ip-1][ip][0]...dp[1][ip][0]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mord mathdefault">p</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mord mathdefault">p</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord">0</span><span class="mclose">]</span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord">1</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mord mathdefault">p</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord">0</span><span class="mclose">]</span></span></span></span>。</p>
<p>得到从起始点开始向左向右的数据后，我们考虑剩下数据的递推。依旧是从起始点出发，向左，我们需要计算出<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mi>p</mi><mo stretchy="false">[</mo><mi>i</mi><mi>p</mi><mo>−</mo><mn>1</mn><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>i</mi><mi>p</mi><mo>+</mo><mn>1</mn><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mn>0</mn><mo stretchy="false">]</mo><mo separator="true">,</mo><mi>d</mi><mi>p</mi><mo stretchy="false">[</mo><mi>i</mi><mi>p</mi><mo>−</mo><mn>1</mn><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>i</mi><mi>p</mi><mo>+</mo><mn>2</mn><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mn>0</mn><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">dp[ip-1][ip+1][0],dp[ip-1][ip+2][0]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mord mathdefault">p</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mord mathdefault">p</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord">0</span><span class="mclose">]</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mord mathdefault">p</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mord mathdefault">p</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">2</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord">0</span><span class="mclose">]</span></span></span></span>等等，一直计算到<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mi>p</mi><mo stretchy="false">[</mo><mn>1</mn><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mn>0</mn><mo stretchy="false">]</mo><mo separator="true">,</mo><mi>d</mi><mi>p</mi><mo stretchy="false">[</mo><mn>1</mn><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>n</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mn>0</mn><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">dp[1][n-1][0],dp[1][n][0]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord">1</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord">0</span><span class="mclose">]</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord">1</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathdefault">n</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord">0</span><span class="mclose">]</span></span></span></span>，可以知道我们可以用二重循环实现，第一重枚举左端点，第二重枚举右端点。同时，也需要向右计算，推出<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mi>p</mi><mo stretchy="false">[</mo><mi>i</mi><mi>p</mi><mo>−</mo><mn>1</mn><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>i</mi><mi>p</mi><mo>+</mo><mn>1</mn><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mn>1</mn><mo stretchy="false">]</mo><mo separator="true">,</mo><mi>d</mi><mi>p</mi><mo stretchy="false">[</mo><mi>i</mi><mi>p</mi><mo>−</mo><mn>2</mn><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>i</mi><mi>p</mi><mo>+</mo><mn>1</mn><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mn>1</mn><mo stretchy="false">]</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi>d</mi><mi>p</mi><mo stretchy="false">[</mo><mn>2</mn><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>n</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mn>1</mn><mo stretchy="false">]</mo><mo separator="true">,</mo><mi>d</mi><mi>p</mi><mo stretchy="false">[</mo><mn>1</mn><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>n</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mn>1</mn><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">dp[ip-1][ip+1][1],dp[ip-2][ip+1][1]...dp[2][n][1],dp[1][n][1]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mord mathdefault">p</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mord mathdefault">p</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord">1</span><span class="mclose">]</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mord mathdefault">p</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">2</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mord mathdefault">p</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord">1</span><span class="mclose">]</span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord">2</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathdefault">n</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord">1</span><span class="mclose">]</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord">1</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathdefault">n</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord">1</span><span class="mclose">]</span></span></span></span>。最后取结果就可以。</p>
<p>不过要注意，目前我们只计算了最小的时间，而没有考虑ddl的问题，即其中的某些方案是否可行，因此，我们在每次递推到第i个景点时，都要考虑一下这个方案的时间是不是比ddl小，如果小，我们才采纳。</p>
<p>还有就是一些细节问题，一开始要初始化为一个极大值，之后<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mi>p</mi><mo stretchy="false">[</mo><mi>i</mi><mi>p</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>i</mi><mi>p</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mn>0</mn><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">dp[ip][ip][0]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mord mathdefault">p</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mord mathdefault">p</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord">0</span><span class="mclose">]</span></span></span></span>和<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mi>p</mi><mo stretchy="false">[</mo><mi>i</mi><mi>p</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>i</mi><mi>p</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mn>1</mn><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">dp[ip][ip][1]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mord mathdefault">p</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mord mathdefault">p</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord">1</span><span class="mclose">]</span></span></span></span>要置为0，最后如果发现<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mi>p</mi><mo stretchy="false">[</mo><mn>1</mn><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>n</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mn>0</mn><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">dp[1][n][0]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord">1</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathdefault">n</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord">0</span><span class="mclose">]</span></span></span></span>和<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mi>p</mi><mo stretchy="false">[</mo><mn>1</mn><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>n</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mn>1</mn><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">dp[1][n][1]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord">1</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathdefault">n</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord">1</span><span class="mclose">]</span></span></span></span>的值都是极大值，说明没有可行方案，输出-1。</p>
<h2 id="代码-3"><a class="markdownIt-Anchor" href="#代码-3"></a> 代码</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1010</span>;</span><br><span class="line"><span class="keyword">int</span> poi[maxn];</span><br><span class="line"><span class="keyword">int</span> t[maxn];</span><br><span class="line"><span class="keyword">int</span> dp[maxn][maxn][<span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">memset</span>(dp, <span class="number">0x3f</span>, <span class="keyword">sizeof</span>(dp));</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="keyword">int</span> poi_0 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; poi[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; t[i];</span><br><span class="line">        <span class="keyword">if</span> (t[i] == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            poi_0 = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    dp[poi_0][poi_0][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    dp[poi_0][poi_0][<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> l = poi_0; l - <span class="number">1</span> &gt;= <span class="number">1</span>; l--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (dp[l][poi_0][<span class="number">0</span>] + poi[l] - poi[l - <span class="number">1</span>] &lt;= t[l - <span class="number">1</span>])</span><br><span class="line">            dp[l - <span class="number">1</span>][poi_0][<span class="number">0</span>] = min(dp[l - <span class="number">1</span>][poi_0][<span class="number">0</span>], dp[l][poi_0][<span class="number">0</span>] + poi[l] - poi[l - <span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">if</span> (dp[l][poi_0][<span class="number">1</span>] + poi[poi_0] - poi[l - <span class="number">1</span>] &lt;= t[l - <span class="number">1</span>])</span><br><span class="line">            dp[l - <span class="number">1</span>][poi_0][<span class="number">0</span>] = min(dp[l - <span class="number">1</span>][poi_0][<span class="number">0</span>], dp[l][poi_0][<span class="number">1</span>] + poi[poi_0] - poi[l - <span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> r = poi_0; r + <span class="number">1</span> &lt;= n; r++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (dp[poi_0][r][<span class="number">1</span>] + poi[r + <span class="number">1</span>] - poi[r] &lt;= t[r + <span class="number">1</span>])</span><br><span class="line">            dp[poi_0][r + <span class="number">1</span>][<span class="number">1</span>] = min(dp[poi_0][r + <span class="number">1</span>][<span class="number">1</span>], dp[poi_0][r][<span class="number">1</span>] + poi[r + <span class="number">1</span>] - poi[r]);</span><br><span class="line">        <span class="keyword">if</span> (dp[poi_0][r][<span class="number">0</span>] + poi[r + <span class="number">1</span>] - poi[poi_0] &lt;= t[r + <span class="number">1</span>])</span><br><span class="line">            dp[poi_0][r + <span class="number">1</span>][<span class="number">1</span>] = min(dp[poi_0][r + <span class="number">1</span>][<span class="number">1</span>], dp[poi_0][r][<span class="number">0</span>] + poi[r + <span class="number">1</span>] - poi[poi_0]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> l = poi_0; l - <span class="number">1</span> &gt;= <span class="number">1</span>; l--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> r = poi_0; r &lt;= n; r++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (dp[l][r][<span class="number">0</span>] + poi[l] - poi[l - <span class="number">1</span>] &lt;= t[l - <span class="number">1</span>])</span><br><span class="line">                dp[l - <span class="number">1</span>][r][<span class="number">0</span>] = min(dp[l - <span class="number">1</span>][r][<span class="number">0</span>], dp[l][r][<span class="number">0</span>] + poi[l] - poi[l - <span class="number">1</span>]);</span><br><span class="line">            <span class="keyword">if</span> (dp[l][r][<span class="number">1</span>] + poi[r] - poi[l - <span class="number">1</span>] &lt;= t[l - <span class="number">1</span>])</span><br><span class="line">                dp[l - <span class="number">1</span>][r][<span class="number">0</span>] = min(dp[l - <span class="number">1</span>][r][<span class="number">0</span>], dp[l][r][<span class="number">1</span>] + poi[r] - poi[l - <span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> r = poi_0; r + <span class="number">1</span> &lt;= n; r++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> l = poi_0; l &gt;= <span class="number">1</span>; l--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (dp[l][r][<span class="number">1</span>] + poi[r + <span class="number">1</span>] - poi[r] &lt;= t[r + <span class="number">1</span>])</span><br><span class="line">                dp[l][r + <span class="number">1</span>][<span class="number">1</span>] = min(dp[l][r + <span class="number">1</span>][<span class="number">1</span>], dp[l][r][<span class="number">1</span>] + poi[r + <span class="number">1</span>] - poi[r]);</span><br><span class="line">            <span class="keyword">if</span> (dp[l][r][<span class="number">0</span>] + poi[r + <span class="number">1</span>] - poi[l] &lt;= t[r + <span class="number">1</span>])</span><br><span class="line">                dp[l][r + <span class="number">1</span>][<span class="number">1</span>] = min(dp[l][r + <span class="number">1</span>][<span class="number">1</span>], dp[l][r][<span class="number">0</span>] + poi[r + <span class="number">1</span>] - poi[l]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (min(dp[<span class="number">1</span>][n][<span class="number">0</span>], dp[<span class="number">1</span>][n][<span class="number">1</span>]) == <span class="number">0x3f3f3f3f</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; min(dp[<span class="number">1</span>][n][<span class="number">0</span>], dp[<span class="number">1</span>][n][<span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />
<h1 id="d车辆调度"><a class="markdownIt-Anchor" href="#d车辆调度"></a> <a href="https://acm.tongji.edu.cn/problem.php?id=1195" target="_blank" rel="noopener">D.车辆调度</a></h1>
<h2 id="题目描述-4"><a class="markdownIt-Anchor" href="#题目描述-4"></a> 题目描述</h2>
<p>张老师设计了一个智能调度系统来控制他的遥控车队，今天，他带着他的车队来到黄渡理工大学的一块空地上测试这个系统。<br />
这块空地可以描述为一个 w * h 大小的长方形，广场上有一些障碍物，几个目标点，当然，还有张老师的车队。<br />
每分钟，调度系统会智能地向其中的一辆遥控车发送以下指令的其中一条：</p>
<ol>
<li>向北走，直到撞到空地的边界、障碍物或其他遥控车；</li>
<li>向南走，直到撞到空地的边界、障碍物或其他遥控车；</li>
<li>向西走，直到撞到空地的边界、障碍物或其他遥控车；</li>
<li>向东走，直到撞到空地的边界、障碍物或其他遥控车；</li>
</ol>
<p>每条指令都会在一分钟之内完成，也就是说，空地上最多只有一辆遥控车在运动。此外，当遥控车无法向相应的方向移动时，它会停在原地。</p>
<p>你想知道，在第 k 分钟时，有没有可能有任意一辆遥控车处在任意一个目标点上。</p>
<h2 id="输入-4"><a class="markdownIt-Anchor" href="#输入-4"></a> 输入</h2>
<p>第一行输入三个数字 w, h, k (1 ≤  w, h ≤ 10, 1 ≤ k ≤ 5) , 含义在题目描述中已给出。<br />
接下来 h 行，每行输入一个长度为 w 的字符串 si，其中第i行的第j个字符表示(i, j)位置的状态。<br />
其中，‘R’ 代表该位置初始有一辆遥控车，‘X’ 代表该位置有障碍物，‘D’ 代表该位置是一个目标点，’.’ 代表该位置可以正常通过。<br />
数据保证广场上的遥控车不超过4辆。</p>
<h2 id="输出-4"><a class="markdownIt-Anchor" href="#输出-4"></a> 输出</h2>
<p>如果k分钟后有可能有任意一个遥控车处在任意一个目标点上，输出 “YES”, 否则输出 “NO”</p>
<h2 id="样例输入-4"><a class="markdownIt-Anchor" href="#样例输入-4"></a> 样例输入</h2>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">6 5 4</span><br><span class="line">.....R</span><br><span class="line">...X..</span><br><span class="line">..D...</span><br><span class="line">....D.</span><br><span class="line">R.R...</span><br></pre></td></tr></table></figure>
<h2 id="样例输出-4"><a class="markdownIt-Anchor" href="#样例输出-4"></a> 样例输出</h2>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">YES</span><br></pre></td></tr></table></figure>
<h2 id="提示"><a class="markdownIt-Anchor" href="#提示"></a> 提示</h2>
<p>样例1中，遥控车可以按下述路线移动：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.....R</span><br><span class="line">...X..</span><br><span class="line">..D...</span><br><span class="line">....D.</span><br><span class="line">R.R...</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">R.....</span><br><span class="line">...X..</span><br><span class="line">..D...</span><br><span class="line">....D.</span><br><span class="line">R.R...</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">R.....</span><br><span class="line">R..X..</span><br><span class="line">..D...</span><br><span class="line">....D.</span><br><span class="line">..R...</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">R.....</span><br><span class="line">..RX..</span><br><span class="line">..D...</span><br><span class="line">....D.</span><br><span class="line">..R...</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">R.....</span><br><span class="line">..RX..</span><br><span class="line">..R...</span><br><span class="line">....D.</span><br><span class="line">......</span><br></pre></td></tr></table></figure>
<p>4分钟时，有一辆遥控车达到了目标点。于是输出&quot;YES&quot;</p>
<h2 id="思路-4"><a class="markdownIt-Anchor" href="#思路-4"></a> 思路</h2>
<p>首先，观察数据，发现这个数据量很小，另外，如果在原题上看，可以发现该题的时限有5s，说明大概是指数级别的复杂度，可以知道该题就是去暴搜。</p>
<p>每一步枚举每一辆小车，每一辆小车再枚举每一个方向，即可。</p>
<p>需要注意的是，如果一辆车在时间t(t&lt;k)时已经到达了目的地，那么就可以直接输出yes，而不必一定要在时间k再输出。因为该车能在t时刻到达一个目的地，那么它一定是朝着x方向一直走，碰到障碍物了，才能到达这个目的地，那么我们后面在t+1，t+2时刻仍然可以朝着x方向走，这样小车就会停在原地不动，一直到k时刻，因此前面只要搜到了，直接输出yes，退出就可以。</p>
<p>另外，注意计算到底是搜索到第几层，边界条件的计算，自己就是因为多搜索了一层，而导致浪费了一个半小时，最后还没调出来。</p>
<h2 id="代码-4"><a class="markdownIt-Anchor" href="#代码-4"></a> 代码</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">int</span> w, h, k;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">char</span> mm[<span class="number">11</span>][<span class="number">11</span>];</span><br><span class="line">    <span class="keyword">int</span> c_x[<span class="number">5</span>];</span><br><span class="line">    <span class="keyword">int</span> c_y[<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line">    node()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">memset</span>(c_x, <span class="number">0</span>, <span class="keyword">sizeof</span>(c_x));</span><br><span class="line">        <span class="built_in">memset</span>(c_y, <span class="number">0</span>, <span class="keyword">sizeof</span>(c_y));</span><br><span class="line">    &#125;</span><br><span class="line">    node(<span class="keyword">const</span> node &amp;a)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= h; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= w; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                mm[i][j] = a.mm[i][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            c_x[i] = a.c_x[i];</span><br><span class="line">            c_y[i] = a.c_y[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> y_move[] = &#123;<span class="number">-1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> x_move[] = &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">-1</span>&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> t, node sta)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">5</span> &amp;&amp; sta.c_x[i] != <span class="number">0</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> yy = sta.c_y[i];</span><br><span class="line">            <span class="keyword">int</span> xx = sta.c_x[i];</span><br><span class="line">            <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                yy += y_move[j];</span><br><span class="line">                xx += x_move[j];</span><br><span class="line">                <span class="keyword">if</span> (!(xx &gt;= <span class="number">1</span> &amp;&amp; xx &lt;= w &amp;&amp; yy &gt;= <span class="number">1</span> &amp;&amp; yy &lt;= h &amp;&amp; sta.mm[yy][xx] != <span class="string">'X'</span> &amp;&amp; sta.mm[yy][xx] != <span class="string">'R'</span>))</span><br><span class="line">                &#123;</span><br><span class="line">                    yy -= y_move[j];</span><br><span class="line">                    xx -= x_move[j];</span><br><span class="line">                    <span class="keyword">if</span> (sta.mm[yy][xx] == <span class="string">'D'</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="built_in">cout</span> &lt;&lt; <span class="string">"YES"</span>;</span><br><span class="line">                        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                    node tem = sta;</span><br><span class="line">                    tem.mm[sta.c_y[i]][sta.c_x[i]] = <span class="string">'.'</span>;</span><br><span class="line">                    tem.mm[yy][xx] = <span class="string">'R'</span>;</span><br><span class="line">                    tem.c_y[i] = yy;</span><br><span class="line">                    tem.c_x[i] = xx;</span><br><span class="line">                    <span class="keyword">if</span> (t &lt; k)</span><br><span class="line">                    &#123;</span><br><span class="line">                        dfs(t + <span class="number">1</span>, tem);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; w &gt;&gt; h &gt;&gt; k;</span><br><span class="line">    node sta;</span><br><span class="line">    <span class="keyword">int</span> p_r = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= h; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= w; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; sta.mm[i][j];</span><br><span class="line">            <span class="keyword">if</span> (sta.mm[i][j] == <span class="string">'R'</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                sta.c_y[p_r] = i;</span><br><span class="line">                sta.c_x[p_r] = j;</span><br><span class="line">                p_r++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    dfs(<span class="number">1</span>, sta);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"NO"</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />
<h1 id="e弦"><a class="markdownIt-Anchor" href="#e弦"></a> <a href="https://acm.tongji.edu.cn/problem.php?id=1196" target="_blank" rel="noopener">E.弦</a></h1>
<h2 id="题目描述-5"><a class="markdownIt-Anchor" href="#题目描述-5"></a> 题目描述</h2>
<p>给定一个圆，圆上有2N个互不重叠的点。每次操作随机选择两个先前未选择过的点连一条弦，共连成N条弦，求所有弦不交的概率。</p>
<h2 id="输入-5"><a class="markdownIt-Anchor" href="#输入-5"></a> 输入</h2>
<p>一行，只有一个整数N（1≤N≤<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><msup><mn>0</mn><mn>7</mn></msup></mrow><annotation encoding="application/x-tex">10^7</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">7</span></span></span></span></span></span></span></span></span></span></span>）</p>
<h2 id="输出-5"><a class="markdownIt-Anchor" href="#输出-5"></a> 输出</h2>
<p>一行，即答案。答案应以模<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><msup><mn>0</mn><mn>9</mn></msup></mrow><annotation encoding="application/x-tex">10^9</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">9</span></span></span></span></span></span></span></span></span></span></span>+7的形式输出。正式地说，令M=<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><msup><mn>0</mn><mn>9</mn></msup></mrow><annotation encoding="application/x-tex">10^9</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">9</span></span></span></span></span></span></span></span></span></span></span>+7， 答案可以表示为最简分数p/q的形式，其中p和q为整数且q与M互质。输出整数x满足 0≤x&lt;M且 x⋅q ≡ p（mod M）。</p>
<h2 id="样例输入-5"><a class="markdownIt-Anchor" href="#样例输入-5"></a> 样例输入</h2>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2</span><br></pre></td></tr></table></figure>
<h2 id="样例输出-5"><a class="markdownIt-Anchor" href="#样例输出-5"></a> 样例输出</h2>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">666666672</span><br></pre></td></tr></table></figure>
<h2 id="思路-5"><a class="markdownIt-Anchor" href="#思路-5"></a> 思路</h2>
<p>其实这是一道很典型的卡特兰数的题，甚至在百度百科上都能搜到（不是）。我们可以通过计算总的方案数与可行方案数，然后做比来得出结果。接下来考虑两种方案数如何计算。</p>
<p>总的方案数：首先，我们可以考虑取两个点px，py，可以选择的方案数是<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msubsup><mi>C</mi><mrow><mn>2</mn><mi>n</mi></mrow><mn>2</mn></msubsup></mrow><annotation encoding="application/x-tex">C_{2n}^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0622159999999998em;vertical-align:-0.24810799999999997em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-2.4518920000000004em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mathdefault mtight">n</span></span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.24810799999999997em;"><span></span></span></span></span></span></span></span></span></span>，接着考虑再取两个点，pm，pn，可以选择的方案数是<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><msubsup><mi>C</mi><mrow><mn>2</mn><mi>n</mi><mo>−</mo><mn>2</mn></mrow><mn>2</mn></msubsup><mn>2</mn></mfrac></mrow><annotation encoding="application/x-tex">\frac{C_{2n-2}^2}{2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.5207849999999998em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.1757849999999999em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.551865em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8913142857142857em;"><span style="top:-2.214em;margin-left:-0.07153em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mathdefault mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">2</span></span></span></span><span style="top:-2.931em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.34552142857142853em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span>。注意这里有一个除2，可以考虑一下，当任取两个点时，都有px，py与pm，pn交换的取法，即x=1，y=2，m=3，n=4以及x=3，y=4，m=1，n=2这两种取法，12与34被取到的顺序不一样，会被我们算作两种取法，但是实际上这是两种完全相同的取法，因此需要除2。同理，接着考虑，再去两个点时，应该要乘<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><msubsup><mi>C</mi><mrow><mn>2</mn><mi>n</mi><mo>−</mo><mn>4</mn></mrow><mn>2</mn></msubsup><mn>3</mn></mfrac></mrow><annotation encoding="application/x-tex">\frac{C_{2n-4}^2}{3}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.5207849999999998em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.1757849999999999em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.551865em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8913142857142857em;"><span style="top:-2.214em;margin-left:-0.07153em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mathdefault mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">4</span></span></span></span><span style="top:-2.931em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.34552142857142853em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span>。注意这里是除3，对于第三次取到的点p，q，除了第三次取到p，q以外，包含了第三次取到x，y和第三次取到m，n这两种情况，所以应该除3去重。比如，对于12，34，56这三对点来说，第三次取12，34，56这三种取法在我们<span class='katex-error' title='ParseError: KaTeX parse error: Expected &#039;EOF&#039;, got &#039;}&#039; at position 11: C_{2n-4}^2}̲'>C_{2n-4}^2}</span>中都会取到，但起始它们对应的都是12，34，56这种结对方式，所以要除3去重（好像讲的很迷糊）。基于此规律，我们可以知道再往后，每次取都要除4，除5等等去重，第一次取相当于除1，一直会取n次，所以，总的方案数：</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>s</mi><mi>u</mi><mi>m</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo>=</mo><mfrac><msubsup><mi>C</mi><mrow><mn>2</mn><mi>n</mi></mrow><mn>2</mn></msubsup><mn>1</mn></mfrac><mo>∗</mo><mfrac><msubsup><mi>C</mi><mrow><mn>2</mn><mi>n</mi><mo>−</mo><mn>2</mn></mrow><mn>2</mn></msubsup><mn>2</mn></mfrac><mo>∗</mo><mfrac><msubsup><mi>C</mi><mrow><mn>2</mn><mi>n</mi><mo>−</mo><mn>4</mn></mrow><mn>2</mn></msubsup><mn>3</mn></mfrac><mo>∗</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo>∗</mo><mfrac><msubsup><mi>C</mi><mn>2</mn><mn>2</mn></msubsup><mi>n</mi></mfrac></mrow><annotation encoding="application/x-tex">sum(n)=\frac{C_{2n}^2}{1}*\frac{C_{2n-2}^2}{2}*\frac{C_{2n-4}^2}{3}*...*\frac{C_{2}^2}{n}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">s</span><span class="mord mathdefault">u</span><span class="mord mathdefault">m</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.177108em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.4911079999999999em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-2.4518920000000004em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mathdefault mtight">n</span></span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.24810799999999997em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:2.196547em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.5105469999999999em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.6964390000000003em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999998em;"><span style="top:-2.451892em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mathdefault mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">2</span></span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.30643899999999996em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:2.196547em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.5105469999999999em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">3</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.6964390000000003em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999998em;"><span style="top:-2.451892em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mathdefault mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">4</span></span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.30643899999999996em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.46528em;vertical-align:0em;"></span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:2.177108em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.4911079999999999em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">n</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-2.4518920000000004em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.24810799999999997em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>=</mo><mfrac><mn>1</mn><mrow><mi>n</mi><mo stretchy="false">!</mo></mrow></mfrac><mo>∗</mo><mfrac><mrow><mn>2</mn><mi>n</mi><mo>∗</mo><mo stretchy="false">(</mo><mn>2</mn><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><mn>2</mn></mfrac><mo>∗</mo><mfrac><mrow><mo stretchy="false">(</mo><mn>2</mn><mi>n</mi><mo>−</mo><mn>2</mn><mo stretchy="false">)</mo><mo stretchy="false">(</mo><mn>2</mn><mi>n</mi><mo>−</mo><mn>3</mn><mo stretchy="false">)</mo></mrow><mn>2</mn></mfrac><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo>=</mo><mfrac><mrow><mo stretchy="false">(</mo><mn>2</mn><mi>n</mi><mo stretchy="false">)</mo><mo stretchy="false">!</mo></mrow><mrow><mi>n</mi><mo stretchy="false">!</mo><mo>∗</mo><msup><mn>2</mn><mi>n</mi></msup></mrow></mfrac></mrow><annotation encoding="application/x-tex">=\frac{1}{n!}*\frac{2n*(2n-1)}{2}*\frac{(2n-2)(2n-3)}{2}...=\frac{(2n)!}{n!*2^n}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.00744em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">n</span><span class="mclose">!</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:2.113em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.427em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mopen">(</span><span class="mord">2</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:2.113em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.427em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mopen">(</span><span class="mord">2</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">2</span><span class="mclose">)</span><span class="mopen">(</span><span class="mord">2</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">3</span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.113em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.427em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">n</span><span class="mclose">!</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.590392em;"><span style="top:-2.9890000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mopen">(</span><span class="mord">2</span><span class="mord mathdefault">n</span><span class="mclose">)</span><span class="mclose">!</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p>
<p>接下来考虑可行的方案数，这个其实算一个典型的卡特兰数。对于一个2n个点的情况，我们可以先考虑将所有点依次标号，从1标到2n，之后从点1出发，我们向点k连线，该线会将其他点分成两部分，可以知道，只有两部分的点数量都为偶数时，才可能出现可行的方案，因此k只能取偶数，1-2之间有0个点，另一边有2n-2个点。1-4有2，3两个点，另一边有2n-4个点等等，因此共有n种划线方法，之后对于每一边，我们又能递归的去求解有2i个点和2n-2i-2点的方案数，因此可行的方案数：</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>s</mi><mi>u</mi><mi>b</mi><mo stretchy="false">(</mo><mn>2</mn><mi>n</mi><mo stretchy="false">)</mo><mo>=</mo><mi>s</mi><mi>u</mi><mi>b</mi><mo stretchy="false">(</mo><mn>0</mn><mo stretchy="false">)</mo><mo>∗</mo><mi>s</mi><mi>u</mi><mi>b</mi><mo stretchy="false">(</mo><mn>2</mn><mi>n</mi><mo>−</mo><mn>2</mn><mo stretchy="false">)</mo><mo>+</mo><mi>s</mi><mi>u</mi><mi>b</mi><mo stretchy="false">(</mo><mn>2</mn><mo stretchy="false">)</mo><mo>∗</mo><mi>s</mi><mi>u</mi><mi>b</mi><mo stretchy="false">(</mo><mn>2</mn><mi>n</mi><mo>−</mo><mn>4</mn><mo stretchy="false">)</mo><mo>+</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo>+</mo><mi>s</mi><mi>u</mi><mi>b</mi><mo stretchy="false">(</mo><mn>2</mn><mi>n</mi><mo>−</mo><mn>2</mn><mo stretchy="false">)</mo><mo>∗</mo><mi>s</mi><mi>u</mi><mi>b</mi><mo stretchy="false">(</mo><mn>0</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">sub(2n)=sub(0)*sub(2n-2)+sub(2)*sub(2n-4)+...+sub(2n-2)*sub(0)
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">s</span><span class="mord mathdefault">u</span><span class="mord mathdefault">b</span><span class="mopen">(</span><span class="mord">2</span><span class="mord mathdefault">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">s</span><span class="mord mathdefault">u</span><span class="mord mathdefault">b</span><span class="mopen">(</span><span class="mord">0</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">s</span><span class="mord mathdefault">u</span><span class="mord mathdefault">b</span><span class="mopen">(</span><span class="mord">2</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">2</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">s</span><span class="mord mathdefault">u</span><span class="mord mathdefault">b</span><span class="mopen">(</span><span class="mord">2</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">s</span><span class="mord mathdefault">u</span><span class="mord mathdefault">b</span><span class="mopen">(</span><span class="mord">2</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">4</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">s</span><span class="mord mathdefault">u</span><span class="mord mathdefault">b</span><span class="mopen">(</span><span class="mord">2</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">2</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">s</span><span class="mord mathdefault">u</span><span class="mord mathdefault">b</span><span class="mopen">(</span><span class="mord">0</span><span class="mclose">)</span></span></span></span></span></p>
<p>对于初始情况，sub(0)和sub(2)都是1，因此，可以发现如果把2n换成n，正好就是一个卡特兰数的递推公式，即sub(2n)=f(n)，f(n)表示n层的卡特兰数。故</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>s</mi><mi>u</mi><mi>b</mi><mo stretchy="false">(</mo><mn>2</mn><mi>n</mi><mo stretchy="false">)</mo><mo>=</mo><mi>f</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo>=</mo><mfrac><msubsup><mi>C</mi><mrow><mn>2</mn><mi>n</mi></mrow><mi>n</mi></msubsup><mrow><mi>n</mi><mo>+</mo><mn>1</mn></mrow></mfrac></mrow><annotation encoding="application/x-tex">sub(2n)=f(n)=\frac{C_{2n}^{n}}{n+1}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">s</span><span class="mord mathdefault">u</span><span class="mord mathdefault">b</span><span class="mopen">(</span><span class="mord">2</span><span class="mord mathdefault">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.1296600000000003em;vertical-align:-0.7693300000000001em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.36033em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-2.4518920000000004em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mathdefault mtight">n</span></span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.24810799999999997em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.7693300000000001em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p>
<p>故总的概率：</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>p</mi><mo stretchy="false">(</mo><mn>2</mn><mi>n</mi><mo stretchy="false">)</mo><mo>=</mo><mfrac><mrow><mi>s</mi><mi>u</mi><mi>b</mi><mo stretchy="false">(</mo><mn>2</mn><mi>n</mi><mo stretchy="false">)</mo></mrow><mrow><mi>s</mi><mi>u</mi><mi>m</mi><mo stretchy="false">(</mo><mn>2</mn><mi>n</mi><mo stretchy="false">)</mo></mrow></mfrac><mo>=</mo><mfrac><msubsup><mi>C</mi><mrow><mn>2</mn><mi>n</mi></mrow><mi>n</mi></msubsup><mrow><mi>n</mi><mo>+</mo><mn>1</mn></mrow></mfrac><mo>∗</mo><mfrac><mrow><mi>n</mi><mo stretchy="false">!</mo><mo>∗</mo><msup><mn>2</mn><mi>n</mi></msup></mrow><mrow><mo stretchy="false">(</mo><mn>2</mn><mi>n</mi><mo stretchy="false">)</mo><mo stretchy="false">!</mo></mrow></mfrac><mo>=</mo><mfrac><mrow><mo stretchy="false">(</mo><mn>2</mn><mi>n</mi><mo stretchy="false">)</mo><mo stretchy="false">!</mo></mrow><mrow><mo stretchy="false">(</mo><mi>n</mi><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo><mo stretchy="false">!</mo><mo>∗</mo><mi>n</mi><mo stretchy="false">!</mo></mrow></mfrac><mo>∗</mo><mfrac><mrow><mi>n</mi><mo stretchy="false">!</mo><mo>∗</mo><msup><mn>2</mn><mi>n</mi></msup></mrow><mrow><mo stretchy="false">(</mo><mn>2</mn><mi>n</mi><mo stretchy="false">)</mo><mo stretchy="false">!</mo></mrow></mfrac><mo>=</mo><mfrac><msup><mn>2</mn><mi>n</mi></msup><mrow><mo stretchy="false">(</mo><mi>n</mi><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo><mo stretchy="false">!</mo></mrow></mfrac></mrow><annotation encoding="application/x-tex">p(2n)=\frac{sub(2n)}{sum(2n)}=\frac{C_{2n}^{n}}{n+1}*\frac{n!*2^n}{(2n)!}=\frac{(2n)!}{(n+1)!*n!}*\frac{n!*2^n}{(2n)!}=\frac{2^n}{(n+1)!}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">p</span><span class="mopen">(</span><span class="mord">2</span><span class="mord mathdefault">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.363em;vertical-align:-0.936em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.427em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">s</span><span class="mord mathdefault">u</span><span class="mord mathdefault">m</span><span class="mopen">(</span><span class="mord">2</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">s</span><span class="mord mathdefault">u</span><span class="mord mathdefault">b</span><span class="mopen">(</span><span class="mord">2</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.936em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.1296600000000003em;vertical-align:-0.7693300000000001em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.36033em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-2.4518920000000004em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mathdefault mtight">n</span></span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.24810799999999997em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.7693300000000001em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:2.30744em;vertical-align:-0.936em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.37144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mopen">(</span><span class="mord">2</span><span class="mord mathdefault">n</span><span class="mclose">)</span><span class="mclose">!</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">n</span><span class="mclose">!</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.936em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.363em;vertical-align:-0.936em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.427em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mclose">!</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">n</span><span class="mclose">!</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mopen">(</span><span class="mord">2</span><span class="mord mathdefault">n</span><span class="mclose">)</span><span class="mclose">!</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.936em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:2.30744em;vertical-align:-0.936em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.37144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mopen">(</span><span class="mord">2</span><span class="mord mathdefault">n</span><span class="mclose">)</span><span class="mclose">!</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">n</span><span class="mclose">!</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.936em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.277392em;vertical-align:-0.936em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.341392em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mclose">!</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.936em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p>
<p>对于计算，记得运算过程中不断取模，另外可以开long long，防止中间运算爆int，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mn>2</mn><mi>n</mi></msup></mrow><annotation encoding="application/x-tex">2^n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.664392em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span></span></span></span></span></span></span>可以通过快速幂计算，之后分子要计算它在模意义下的逆元，可以利用费马小定理加快速幂计算，也可以使用拓展欧几里得计算，我这里用的是费马小定理。</p>
<h2 id="代码-5"><a class="markdownIt-Anchor" href="#代码-5"></a> 代码</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line">ll n;</span><br><span class="line"><span class="function">ll <span class="title">ksm</span><span class="params">(ll b, ll p, ll k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll ans = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (p &gt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (p &amp; <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            ans = ans * b % k;</span><br><span class="line">        &#125;</span><br><span class="line">        b *= b;</span><br><span class="line">        b %= k;</span><br><span class="line">        p &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans % k;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> ll mod = <span class="keyword">int</span>(<span class="number">1e9</span>) + <span class="number">7</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    ll up = ksm(<span class="number">2</span>, n, mod);</span><br><span class="line">    ll down = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n + <span class="number">1</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        down *= i;</span><br><span class="line">        down %= mod;</span><br><span class="line">    &#125;</span><br><span class="line">    up*=ksm(down,mod<span class="number">-2</span>,mod);</span><br><span class="line">    up%=mod;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;up;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />
<h1 id="f排列计算"><a class="markdownIt-Anchor" href="#f排列计算"></a> <a href="https://acm.tongji.edu.cn/problem.php?id=1194" target="_blank" rel="noopener">F.排列计算</a></h1>
<h2 id="题目描述-6"><a class="markdownIt-Anchor" href="#题目描述-6"></a> 题目描述</h2>
<p>天才程序员菜哭武和石头组队参加一个叫做国际排列计算竞赛 (International Competition of Permutation Calculation, ICPC) 的比赛，这个比赛的规则是这样的：<br />
一个选手给出一个长度为 n 的排列，另一个选手给出 m 个询问，每次询问是一个形如 (l, r) 的数对，查询队友给出的排列中第 l 个数到第 r 个数的和，并将查询到的这个区间和加入总分，最后总分最高的队伍就能获胜。<br />
石头手速很快，在比赛一开始就给出了 m 个询问；菜哭武也很强，他总是能找到最合适的排列，使得他们队的总分尽可能高。<br />
在看比赛直播的你看到了石头给出的 m 个询问，聪明的你能不能预测出他们队伍最终的得分呢？</p>
<p>一个排列是一个长度为 n 的数列，其中 1 ~ n 中的每个数都在数列中恰好出现一次。比如 [1, 3, 2] 是一个排列，而 [2, 1, 4] 和 [1, 2, 3, 3] 不是排列。</p>
<h2 id="输入-6"><a class="markdownIt-Anchor" href="#输入-6"></a> 输入</h2>
<p>第一行输入两个数 n (1≤n≤200000) 和 m (1≤m≤200000) 。<br />
接下来 m 行，每行输入两个数 l 和 r ，代表这次查询排列中第 l 个到第 r 个的和。</p>
<h2 id="输出-6"><a class="markdownIt-Anchor" href="#输出-6"></a> 输出</h2>
<p>输出一个整数，代表他们队伍总分的最大值。</p>
<h2 id="样例输入-6"><a class="markdownIt-Anchor" href="#样例输入-6"></a> 样例输入</h2>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">7 3</span><br><span class="line">1 3</span><br><span class="line">3 7</span><br><span class="line">5 6</span><br></pre></td></tr></table></figure>
<h2 id="样例输出-6"><a class="markdownIt-Anchor" href="#样例输出-6"></a> 样例输出</h2>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">46</span><br></pre></td></tr></table></figure>
<h2 id="提示-2"><a class="markdownIt-Anchor" href="#提示-2"></a> 提示</h2>
<p>一个符合条件的排列是 [1, 3, 6, 4, 7, 5, 2]，于是最终的得分为 (1 + 3 + 6) + (6 + 4 + 7 + 5 + 2) + (7 + 5) = 46</p>
<h2 id="思路-6"><a class="markdownIt-Anchor" href="#思路-6"></a> 思路</h2>
<p>是简单题，也是我第二道去做的题。</p>
<p>题意很简单，对于1到n的序列，有m次询问，每次询问一个区间，使得该区间内的各位置的询问次数+1，之后给序列的每一个位置都放一个1到n之间的数（每个数都只能用一次），之后得分为每个位置的数乘该位置的询问次数的的总和，求该值的最大值。</p>
<p>很容易能够想到，我们每次贪心的去放数，在询问次数最大的位置放值最大的数，可以使结果最大化。接下来就是考虑如何得到各个位置的查询次数。</p>
<p>如果每次都暴力模拟，那么每次都可能以<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\Omicron(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathrm">O</span></span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span>的代价来使一个区间内的所有位置访问次数+1，然后需要操作m次，复杂度为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">O</mi><mo stretchy="false">(</mo><mi>n</mi><mi>m</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\Omicron(nm)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathrm">O</span></span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mord mathdefault">m</span><span class="mclose">)</span></span></span></span>，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><msup><mn>0</mn><mn>10</mn></msup></mrow><annotation encoding="application/x-tex">10^{10}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">0</span></span></span></span></span></span></span></span></span></span></span></span>的数据规模我们显然无法接受。</p>
<p>对于区间操作，我们很容易的想到差分，树状数组，线段树等来优化，我们可以发现，本题需要m次区间修改以及最后的1次区间查询，因此直接差分就完全可以解决，维护初始值为0的差分数组，每次修改l到r的区间，相当于arr[l]++，arr[r+1]–，每次操作的代价是<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\Omicron(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathrm">O</span></span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span>，最后对差分数组求前缀和，即可得到每个位置的查询次数，对数组排序，将次数最高的排在最前面，把数字依次从n到1的与次数匹配，统计答案即可，时间复杂度为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">O</mi><mo stretchy="false">(</mo><mi>m</mi><mi>a</mi><mi>x</mi><mo stretchy="false">(</mo><mi>m</mi><mo separator="true">,</mo><mi>n</mi><mi>log</mi><mo>⁡</mo><mi>n</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\Omicron(max(m,n\log n))</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathrm">O</span></span><span class="mopen">(</span><span class="mord mathdefault">m</span><span class="mord mathdefault">a</span><span class="mord mathdefault">x</span><span class="mopen">(</span><span class="mord mathdefault">m</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">n</span><span class="mclose">)</span><span class="mclose">)</span></span></span></span>。</p>
<h2 id="代码-6"><a class="markdownIt-Anchor" href="#代码-6"></a> 代码</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">200010</span>;</span><br><span class="line"><span class="keyword">int</span> nn[maxn]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a&gt;b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    <span class="keyword">int</span> l,r;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;l&gt;&gt;r;</span><br><span class="line">        nn[l]++;</span><br><span class="line">        nn[r+<span class="number">1</span>]--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        nn[i]=nn[i<span class="number">-1</span>]+nn[i];</span><br><span class="line">    &#125;</span><br><span class="line">    sort(nn,nn+n+<span class="number">2</span>,cmp);</span><br><span class="line">    ll ans=<span class="number">0</span>;</span><br><span class="line">    ll now=n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n+<span class="number">2</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(nn[i]==<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ans+=nn[i]*now;</span><br><span class="line">        now--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;ans;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>理论学习</category>
      </categories>
      <tags>
        <tag>ACM</tag>
        <tag>题解</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>学习C++的一些忠告</title>
    <url>/%E5%AD%A6%E4%B9%A0C-%E7%9A%84%E4%B8%80%E4%BA%9B%E5%BF%A0%E5%91%8A/</url>
    <content><![CDATA[<p>因为自己也确实是在学习C++的过程中感到很迷茫，有时候也想放弃。之后偶然看到了这篇文章，觉得文章中提出的这50条忠告说的很有道理，在这里转载一下，希望以后再陷入迷茫低谷的时候可以用来激励自己。</p>
<blockquote>
<p>1.把C++当成一门新的语言学习；</p>
</blockquote>
<blockquote>
<p>2.看《Thinking In C++》，不要看《C++变成死相》；</p>
</blockquote>
<blockquote>
<p>3.看《The C++ Programming Language》和《Inside The C++ Object Model》,不要因为他们很难而我们自己是初学者所以就不看；</p>
</blockquote>
<blockquote>
<p>4.不要被VC、BCB、BC、MC、TC等词汇所迷惑——他们都是集成开发环境，而我们要学的是一门语言；</p>
</blockquote>
<blockquote>
<p>5.不要放过任何一个看上去很简单的小编程问题——他们往往并不那么简单，或者可以引伸出很多知识点；</p>
</blockquote>
<blockquote>
<p>6.会用Visual C++，并不说明你会C++；</p>
</blockquote>
<blockquote>
<p>7.学class并不难，template、STL、generic programming也不过如此——难的是长期坚持实践和不遗余力的博览群书；</p>
</blockquote>
<blockquote>
<p>8.如果不是天才的话，想学编程就不要想玩游戏——你以为你做到了，其实你的C<ins>水平并没有和你通关的能力一起变高——其实可以时刻记住：学C</ins>是为了编游戏的；</p>
</blockquote>
<blockquote>
<p>9.看Visual C<ins>的书，是学不了C</ins>语言的；</p>
</blockquote>
<blockquote>
<p>16.把时髦的技术挂在嘴边，还不如把过时的技术记在心里；</p>
</blockquote>
<blockquote>
<p>18.学习编程最好的方法之一就是阅读源代码；</p>
</blockquote>
<blockquote>
<p>19.在任何时刻都不要认为自己手中的书已经足够了；</p>
</blockquote>
<blockquote>
<p>20.请阅读《The Standard C++ Bible》(中文版：标准C<ins>宝典)，掌握C</ins>标准；</p>
</blockquote>
<blockquote>
<p>21.看得懂的书，请仔细看；看不懂的书，请硬着头皮看；</p>
</blockquote>
<blockquote>
<p>22.别指望看第一遍书就能记住和掌握什么——请看第二遍、第三遍；</p>
</blockquote>
<blockquote>
<p>23.请看《Effective C++》和《More Effective C++》以及《Exceptional C++》；</p>
</blockquote>
<blockquote>
<p>24.不要停留在集成开发环境的摇篮上，要学会控制集成开发环境，还要学会用命令行方式处理程序；</p>
</blockquote>
<blockquote>
<p>25.和别人一起讨论有意义的C++知识点，而不是争吵XX行不行或者YY与ZZ哪个好；</p>
</blockquote>
<blockquote>
<p>26.请看《程序设计实践》，并严格的按照其要求去做；</p>
</blockquote>
<blockquote>
<p>27.不要因为C和C++中有一些语法和关键字看上去相同，就认为它们的意义和作用完全一样；</p>
</blockquote>
<blockquote>
<p>28.C<ins>绝不是所谓的C的“扩充”——如果C</ins>一开始就起名叫Z语言，你一定不会把C和Z语言联系得那么紧密；</p>
</blockquote>
<blockquote>
<p>29.请不要认为学过XX语言再改学C++会有什么问题——你只不过又在学一门全新的语言而已；</p>
</blockquote>
<blockquote>
<p>30.读完了《Inside The C++ Object Model》以后再来认定自己是不是已经学会了C++；</p>
</blockquote>
<blockquote>
<p>31.学习编程的秘诀是：编程，编程，再编程；</p>
</blockquote>
<blockquote>
<p>32.请留意下列书籍：《C<ins>面向对象高效编程（C</ins> Effective Object-Oriented Software Construction）》《面向对象软件构造(Object-Oriented Software Construction)》《设计模式（Design Patterns）》《The Art of Computer Programming》；</p>
</blockquote>
<blockquote>
<p>34.请把书上的程序例子亲手输入到电脑上实践，即使配套光盘中有源代码；</p>
</blockquote>
<blockquote>
<p>35.把在书中看到的有意义的例子扩充；</p>
</blockquote>
<blockquote>
<p>36.请重视C++中的异常处理技术，并将其切实的运用到自己的程序中；</p>
</blockquote>
<blockquote>
<p>37.经常回顾自己以前写过的程序，并尝试重写，把自己学到的新知识运用进去；</p>
</blockquote>
<blockquote>
<p>38.不要漏掉书中任何一个练习题——请全部做完并记录下解题思路；</p>
</blockquote>
<blockquote>
<p>39.C<ins>语言和C</ins>的集成开发环境要同时学习和掌握；</p>
</blockquote>
<blockquote>
<p>40.既然决定了学C++,就请坚持学下去，因为学习程序设计语言的目的是掌握程序设计技术，而程序设计技术是跨语言的；</p>
</blockquote>
<blockquote>
<p>41.就让C<ins>语言的各种平台和开发环境去激烈的竞争吧，我们要以学习C</ins>语言本身为主；</p>
</blockquote>
<blockquote>
<p>42.当你写C++程序写到一半却发现自己用的方法很拙劣时，请不要马上停手；请尽快将余下的部分粗略的完成以保证这个设计的完整性，然后分析自己的错误并重新设计和编写（参见43）；</p>
</blockquote>
<blockquote>
<p>43.别心急，设计C++的class确实不容易；自己程序中的class和自己的class设计水平是在不断的编程实践中完善和发展的；</p>
</blockquote>
<blockquote>
<p>44.决不要因为程序“很小”就不遵循某些你不熟练的规则——好习惯是培养出来的，而不是一次记住的；</p>
</blockquote>
<blockquote>
<p>45.每学到一个C++难点的时候，尝试着对别人讲解这个知识点并让他理解——你能讲清楚才说明你真的理解了；</p>
</blockquote>
<blockquote>
<p>46.记录下在和别人交流时发现的自己忽视或不理解的知识点；</p>
</blockquote>
<blockquote>
<p>47.请不断的对自己写的程序提出更高的要求,哪怕你的程序版本号会变成Version 100.XX；</p>
</blockquote>
<blockquote>
<p>48.保存好你写过的所有的程序——那是你最好的积累之一；</p>
</blockquote>
<blockquote>
<p>49.请不要做浮躁的人；</p>
</blockquote>
<blockquote>
<p>50.请热爱C++!</p>
</blockquote>
<p>转载自：<a href="https://blog.csdn.net/happyguys12345/article/details/72828625" target="_blank" rel="noopener">https://blog.csdn.net/happyguys12345/article/details/72828625</a></p>
]]></content>
      <categories>
        <category>感想杂谈</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>【模板】三分答案（2个）</title>
    <url>/%E3%80%90%E6%A8%A1%E6%9D%BF%E3%80%91%E4%B8%89%E5%88%86%E7%AD%94%E6%A1%88%EF%BC%882%E4%B8%AA%EF%BC%89/</url>
    <content><![CDATA[<p>三分答案，可以用来求解凹函数或者凸函数的最值问题。</p>
<p>当然，此类问题也可以通过对该函数求导，转换成对于导函数的二分答案问题（不过有一些函数可能不太能求导？）</p>
<p>三分答案的原理是在l与r之间再取两个点lm与rm，将[l,r]区间分为三段，比较f(lm)与f(rm)的值。假设函数为凹函数求最小值，且f(lm)&lt;f(rm)，那说明lm更加靠近最值点（当然左右不均衡，只是一种形象的说法），那也就说明rm一定在最值点的右边，r=rm。对于其他情况以及凸函数同理，就是基于这么一种思想，可以使得l与r不断向最值点逼近。主要是思想就是保证在缩小的过程中最值点一直在[l,r]当中。</p>
<p>这里记录了一下两个三分答案的模板（都是求凸函数的最大值，正好与上面相反，可以帮助加深理解，凹函数的同理，理解以后非常好写），第一个是整数的三分答案，第二个是浮点数的三分答案模板：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//整数三分答案</span></span><br><span class="line"><span class="keyword">int</span> lv, rv;</span><br><span class="line"><span class="keyword">while</span> (l &lt; r)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> lm = l + (r - l) / <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">int</span> rm = r - (r - l) / <span class="number">3</span>;</span><br><span class="line">    lv = f(lm);</span><br><span class="line">    rv = f(rm);</span><br><span class="line">    <span class="keyword">if</span> (lv &lt; rv)</span><br><span class="line">        l = lm + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        r = rm - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">ans = max(lv, rv);</span><br></pre></td></tr></table></figure>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//浮点三分答案</span></span><br><span class="line"><span class="keyword">double</span> lv, rv;</span><br><span class="line"><span class="keyword">while</span> (r - l &gt; eps)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">double</span> lm = l + (r - l) / <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">double</span> rm = r - (r - l) / <span class="number">3</span>;</span><br><span class="line">    lv = f(lm);</span><br><span class="line">    rv = f(rm);</span><br><span class="line">    <span class="keyword">if</span> (lv &lt; rv)</span><br><span class="line">        l = lm;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        r = rm;</span><br><span class="line">&#125;</span><br><span class="line">ans = max(lv, rv);<span class="comment">//浮点数的话lv,rv都可以</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>理论学习</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>模板</tag>
      </tags>
  </entry>
  <entry>
    <title>考研经验杂谈</title>
    <url>/%E8%80%83%E7%A0%94%E7%BB%8F%E9%AA%8C%E6%9D%82%E8%B0%88/</url>
    <content><![CDATA[<h1 id="为什么要考研"><a class="markdownIt-Anchor" href="#为什么要考研"></a> 为什么要考研</h1>
<p>这个是很多同学问过我的问题，也是很多同学也在迷茫困惑的问题。</p>
<p>对于我自己来说，决定考研是多方面的因素。首先，在大三下半学期之前，我的打算其实是直接工作的，甚至寒假回去和家里人说也是准备直接工作，因为个人觉得自己的动手能力还算比较强的，另外对科研也不是很感兴趣。但是大三下半学期选了沈坚老师的计网，占用了我大量的时间，几乎每周七天总得拿出3-4天时间去做计网作业，再加上还有其他一些杂课，而且呈均匀的状态分布在周一到周五，使得我一直难以组织有效的空闲时间去准备工作相关的东西（甚至由于有很多门课设的存在，使得我期末还非常的忙碌痛苦），因此也就搁置了准备工作的计划。</p>
<p>对于直接工作的同学来说，其实2-3月就需要去准备相关的材料以及笔试面试等内容，然后投递了，如果等到学期结束暑假再去准备的其实蛮紧张的。</p>
<p>而也就是在大三下半学期当中，我在知乎上看到了中科大的软件学院专硕（以下简称科软）多次冲上热搜，对它有了一些了解，并且也产生了浓厚的兴趣。</p>
<p>科软的培养方案与其他大多数研究生的培养方案有所不同。正常的研究生培养一般都是和导师绑定，研一上一年课，并且研究生期间都是听从导师的指导，跟着导师做项目和课题，在这个期间能不能去实习，需要完成什么任务，以及最后的毕业标准，都需要听导师的指导，需要完成一定的科研任务。</p>
<p>而科软则是无导师制，研一上一年课，与本科时上课相近，之后是强制要求实习，需要满足一定的时间（好像是单个单位7个月），之后就可以申请毕业。毕业则是需要你写一篇工程论文（应该是只要通过学校的审核要求即可），并不需要像其他研究生一样发布多少科研成果，必须至少发什么水平的文章才能毕业。同时，由于科软的长时实习，使得毕业时拿offer会变得非常有优势。</p>
<p>我本身不喜欢科研，不喜欢写报告，不喜欢被push，而更喜欢写代码，做开发，因此科软这种无导师且强制实习的安排非常适合我。另外其实我本身也觉得自己的技术力其实不太够，直接找工作的话可能会比较仓促。同时我感觉在大学期间学的比较浮躁，像机组这种课等于没学过，考研也是给自己一个机会能够专注学习一下，也算是对自己大学学习的一个总结了。而且在成功考上之后，也会有大量的时间能够给自己缓冲，也能有很多的空余时间可以支配，可以读一些计算机的经典书籍之类的。</p>
<p>上面讲的是从考上的意义来讲的为什么考研，接下来主要是从能不能考上的角度讲一讲为什么考研。众所周知，考研是先填报志愿，10月填报，后进行考试，12月才考试，且只能填报一个志愿，考研基本2月下半月出分，出分之后3月底基本上才进行复试，才会出录取结果。同时，考研的过程就如同一个黑盒，它与高考不同，在这个过程当中没有人监督你，没有人检查你的学习成果，也就是说你其实很难知道自己目前是怎样一个水平，并且在考之前你也不知道有多少人报考了和你一样的院校专业，你连你的竞争对手有多少，竞争压力有多大其实也是不好评估的。如果失利，那么再去准备春招的话时间多少会有些紧张。</p>
<p>对于我自己来说，首先，我是在大三下半学期结束之后才能有时间准备考研，也就是说我准备考研的时间只能有4-5个月，而科软的考试科目是22 408，实际上数学一要比数学二多了近乎一半的内容，同时英语二也比英语一简单很多，因此从科目上来看，科软相比于其他院校更适合我去考（如果你是要考11 408，那么请尽早做准备，内容还是很多的）。其次，实际上各大院校当中，最优秀的那一批人其实都已经保研、出国、工作了，所以实际上参与考研竞争的人竞争力其实并没有那么强，因此从学校层级来看、学习能力来看，我觉得自己的竞争力应该也不算太差（不过最近考研人数年年新高，从这个角度来看竞争压力其实在增大）。另外，考研作为应试教育，并且在各科都有充分的备考资料的情况下，我觉得是完全可以速成的，再加上大学期间自己基本上所有科目都是突击5小时拿良，因此我觉得在短时间内拿到80%的分数我应该还是能做到的。最后，科软的复试是100机试+100面试+25英语面试，总分是初试分数与复试分数相加，因此初试成绩占比非常高，只要初试成绩较高，那么上岸的可能性会非常大，有些学校（比如同济），复试成绩的占比非常高，可能会达到和初试1：1，而且复试还有一票否决权，即只要你复试成绩不合格，就不予录取，不管你初试成绩多高，因此一旦复试被刷，就会非常伤，处于一个很尴尬的境地，而科软的分数构成无疑减少了风险，因为上岸的可能性又会高不少，并且科软招收5、600人，这种招收人数较多的学校，意味着其分数线会相对比较稳定，有些学校专业可能只招收个位数的人，这种会非常容易出现报录比炸掉或者有神仙报考的情况，风险很高（虽然有同学知道科软2021年有4000人报考，复试线有388之高，但是首先中科大作为华五，报录比8：1其实并不算高，另外2021年数学与408都相对简单，而且还是22，安徽还是水区，因此388换到北京上海的考11 408的院校来说其实就相当于350、360的水平，作为华五来说这个分数并不算高，而且4000人确实有些太多了，这也让我觉得并不是一个能够持续的数字，实际上也确实2022年只有不到2000人报考，虽然有人会想着千层博弈，但是在大数据下大部分人还是处在第一层，不过这也意味着明年的报考人数可能又会变多，也就是所谓的大小年之分）。</p>
<p>综上，我在考之前是充分考虑了自己为什么要考、考上了会有哪些收益、以及能不能考上这些问题的。在这个过程当中有人问过我没有考虑过复旦、软微、同济这些学校么。首先我时间很不充分，所以不太考虑11 408的院校，其次我考研的最重要目的就是不想搞考研，喜欢无导师制，而且复试占比低，不确定性小，所以最后还是选择了科软。</p>
<p>对于还在迷茫的同学，建议是多了解，比如出国有什么要求，能去哪里，难度如何。工作流程是怎样的，时间节点是怎样的，难度如何。考研流程是什么样的，考多少分是什么难度等等。只有你了解的越全面，才能够充分比较衡量各种方案的优劣，做出最合适自己的选择，因此不要着急去做决定，多去收集信息，都了解了再做决定。</p>
<p>如果是已经决定考研，但是还没有准备好考哪里的，建议先按照11 408准备，因为大部分院校还是考11 408的，即使后面要转其他的科目也是相当于降维打击。另外备考从现在就可以开始了，不然到后面准备起来会很紧张。</p>
<hr />
<h1 id="怎么考研"><a class="markdownIt-Anchor" href="#怎么考研"></a> 怎么考研</h1>
<p>以下是我自己的备考经历，科软22 408，供大家参考</p>
<h2 id="初试"><a class="markdownIt-Anchor" href="#初试"></a> 初试</h2>
<p><img src="../images/pasted-6.png" alt="upload successful" /></p>
<p>最终的分数是401分，其实和我估计的结果是差不多的，在考试之前，我给自己设立的目标是70 70 130 130 400，在考试之后，我的估分是65 85 120 120 390，最后还是考到了400分，也算是圆满完成了目标吧。</p>
<p>我是8月才开始准备的考研，备考时间大概4-5个月，因此我的经验中大部分分享都比较急，仅供参考。另外我个人是以效率至上的，因此每天的学习时间其实并不长，大概5-7小时，时间少但是高效，大家对于进度的控制也可以在知乎上参见其他经验帖。</p>
<p>初试相关的主流的各种资料与视频等在各种考研公众号上其实都有，大家可以在知乎或者B站搜搜相应的公众号以及资料等，当然有能力还是鼓励支持正版。</p>
<p>初试的各种资料以及课程仅代表个人感受，事实上每个人的感知与学习能力都是不同的，因此我建议每个老师都先听几节课看看风格，并不会耽误多长时间。磨刀不误砍柴工，适合自己的才是最好的。</p>
<p>在时间充足的情况下我的建议是博观而约取，即每个老师都课都看一看，因为不同老师的课侧重点不同，同时讲授的技巧方法也不同，考研比拼的是熟练度，需要反复多次，不然会遗忘，因此可以在多轮复习时学习学习其他老师的内容，不要抱死不放。</p>
<p>图书馆可以预约考研座位，书再也不用往回拿了（，另外最后一个月的话要调整作息，争取对标考研，如果考外校的话酒店记得提前订好。</p>
<h3 id="政治"><a class="markdownIt-Anchor" href="#政治"></a> 政治</h3>
<p>政治的话我前期看的是徐涛老师的网课（每天两节课），徐涛老师的风格诙谐幽默，适合前期慢慢看，不过可能不进脑子，看完一遍就忘记了（</p>
<p>在看完徐涛老师网课之后发现自己好像什么都没记住，之后我又将徐涛老师的教材过了一遍。</p>
<p>再后面时间来不及了，所以我主要是跟着空卡（B站up主）反复过大纲（虽然争议比较多，但是我觉得还是很适合我的），并且做了肖八肖四（肖1000由于时间原因基本上没怎么做）。</p>
<p>大题是直接背诵的空卡整理的肖四版本，肖八只需要做选择就好了，因为内容太多，所以其实并没有全部背下来，马原大题全背了，中特背了前两套，史纲背的是空卡整理的通用模板，思修背了第一套，时政背的通用模板。恰逢今年肖老押题并不是很准，所以对我这种背的不是很好的人来说其实是比较有利的。</p>
<p>对于政治的话，由于大题的不确定性较高，因此选择题是基本盘，前面准备的基本上也全部是选择题，选择题其实是很考察记忆的，因此我建议政治不要准备的太晚，慢慢的反复多次才能记住，不想死记的话建议多刷题，肖1000，以及徐涛、腿姐的题，都可以刷，也可以从各种考研政治微信小程序上刷题，多刷才能记住，不然发现后期什么都不记得，选择题错很多会很痛苦。</p>
<p>大题的话确实背肖四就够了，不过我觉得空卡整理的真的很有用，过大纲的视频很有助于把握政治这一学科的整体命脉，整理的大题由于她的视频里有体现逻辑，所以背起来也比较好背（尤其是马原）。实际上大题的话很重要的一点是有话可说，因为我本身不是一个记忆力很好的选手，所以肖四大题对我来说更像是素材。在考场上我也是在尽量分析材料，根据问题，看看材料中有哪些内容相关，将其延申拓展，再结合自己背诵的材料，即可答题。政治最重要的一点就是一定要写满！！！另外考研政治一共三小时，但是要写满的话其实时间还是蛮紧张的，由于大家平时基本上不会有模拟政治答题的机会，因此在考场上一定要注意把握时间。我在考试时时间其实就不是很够，因为思修那道大题材料没什么可抄的，我也没有什么可写的，并且思修的空其实是比其他大题少的，因此我将其留到了最后，7-8分钟两问每一问就写了3行，但是一定不能空下，另外字也非常重要，如果你的字不清楚或者不好看的话建议练练字，市面上有专门的考研政治字帖。</p>
<p>政治个人建议早一些开始，多做一些题，有些人可能建议最后突击，这样性价比高，但是如果有时间的话还是建议好好学一下，毕竟65-80和115-130是一样的，而且如果你是真的没怎么学的话，后期做肖四只有20多分的时候会很慌的（不过真题其实一般都比模拟题简单好多），我就是后面很慌，最后2周直接放弃了其他科目，专攻政治，最后的选择大概是33分，可能是安徽水区再加上字迹比较工整，所以大题分数比较高（或许也能证明我的抄材料大法是正确的？）。</p>
<h3 id="英语"><a class="markdownIt-Anchor" href="#英语"></a> 英语</h3>
<p>英语分数其实是很出乎我的意料的，因为我其实并没有在英语方面下很大功夫，而且自己的英语水平好像并不是很好，但是最后能取得这么高的成绩真的是很幸运了，考研英语客观题共60分，我应该是只错了一个阅读，扣两分。</p>
<p>四级550分，六级没过，因此我的英语水平不是很好，英语的话我觉得最重要的就是词汇，我一直秉持的观点就是，如果一篇文章的词汇你全部认识，那么你的阅读绝对不会差到哪里去。考研英语中最重要的就是阅读，阅读有整整50分，得阅读者得天下，阅读最重要的又是词汇。我是从备考开始每天背单词，用的是手机app，各种app其实都差不多，我用的是扇贝，其他的墨墨等也可以，看个人喜好。词汇的话我是每天复习+新词140词，过了一遍精简版的3600词，之后就一直反复的过核心2200词，词汇这个事情也是个反复记忆的事情，刚开始可能会很痛苦，后面可能会轻松一些。</p>
<p>习题的话因为我时间有限，所以只是把所有英语二的题做了一遍，前期的是每天一篇阅读，保持手感，后面则是模拟考试，整套地刷。做题我选择的是精做法，即在做完对完答案以后我会对着逐句翻译去看阅读，对不认识的词会标注并且想着记一下（可以发现有很多词是会频繁出现的，包括一些生义，也会反复考），精过一遍后再去看题目解析（这个过程也相当于练翻译了）。</p>
<p>对于完型，完型虽然每个0.5分，性价比不高，但是最好也不要放弃，近几年完型的难度在不断下降，像我这种拿满是完全有可能的，不过也不需要可以准备，每年的题认真做了，订正了就可以了。</p>
<p>对于翻译，没有特别准备过，也是建议认真把真题做好就可以了，也可以看看考研老师们的课。</p>
<p>对于作文，作文又是考研英语里的第二座大山，英一30分，英二25分。作文的话我觉得写是非常必要的，不然很容易出考场上下不了笔的情况。对于小作文来说，全国卷的同学们应该会很熟悉，是100词的书信，小作文其实并不需要多么炫技，更重要的是看语域是否得体，内容是否完整，再加上书信的类型比较多，也不太好背模板，因此我是凭借着高中的底子场上直接写的，再加上一些常用的复杂句式，其实100词是比较好凑的。大作文的话我强烈建议模板化写作，模板的话我推荐使用王江涛的作文书，在里面找两三篇作文模板，再结合自己的或者网上其他资料修改一下，之后套用模板写作。比如英语二基本上考察的都是图表类作文，因此我是有两个模板的，一个动态图模板，一个静态图模板，三段论的形式，中间背了6个解释原因的句子（从不同的角度，例如政治、经济、环境等因素），之后反复套用。另外作文的话我觉得字非常关键，这应该也是我英语能取得好成绩的重要原因，如果字不好看的同学要考虑练字，下面是我的一份作文示例：<br />
<img src="../images/pasted-7.png" alt="upload successful" /></p>
<p>对于时间充裕的同学，我建议可以多背作文，毕竟这才是提升内功的最好方法，具体也可以看一看王江涛老师的作文课。另外英语考试的时间其实是很紧张的，因此考前一定要严格模拟整套卷子，为自己规划好各个题目的作答时间，如果是做的快时间比较充裕的同学，可以考虑作文打草稿或者减慢誊写速度来提高作文质量。</p>
<p>对于新题型（英语二）来说，近些年新题型的难度感觉在不断上升，因此新题型一定不要急，全文看过之后再去做，新题型丢分很可惜，而且一丢很有可能不止一个空。</p>
<h3 id="数学"><a class="markdownIt-Anchor" href="#数学"></a> 数学</h3>
<p>数学的话我个人的基础其实比较一般，高数上是及格，高数下是良。数学二要比数学一的内容少接近一半，不考概率论，高数下的内容涉及的也很少。数学在改革以后的感觉很接近高中的数学试卷形式，10道选择+6道填空，每个5分，大题一道10分，剩余12分。考研数学与高考不同的一点在于考研数学相对来说没有压轴题，因为考察的内容很多，所以基本上每一道题都在考察不同的内容，同时难度也偏向于均衡，即没有特别简单的送分题，也没有特别难的压轴题（个别年份也会有）。因此在考场上可能出现前面有些题不太好做，但是后面的题目反而比较容易的情况，同时这也表明了数学考高分其实是很有可能的，也说明我们在复习的过程中要保持全面，这样才能拿到好成绩。</p>
<p>对于考研老师的推荐，我个人基础阶段看的是汤家凤，强化阶段看的是张宇，线代也是看的张宇。但是并不推荐汤家凤，个人觉得张宇和武钟祥老师讲的比较好。线代虽然网上推荐李永乐的比较多，但是我并不能听懂他讲话，因此还是看的张宇的线代，个人觉得讲的还是不错的。</p>
<p>习题来说一般是跟着哪个老师就做他的习题就好了，不过不是很推荐汤的1800，重复题比较多，另外武钟祥的严选题质量很高。最后模拟题的话李林8+4感觉质量还行，合工大的卷子质量感觉也还不错。因为我备考的比较晚，因此题刷的不是很多，习题是1800的基础篇+半本严选题，之后就是09年以后的真题+李林8+4的模拟题。大家时间比较充裕的也可以参考其他经验贴等的推荐刷题。</p>
<p>从今年的考试来看，感觉越来越重视基础、基本概念和定理推导了，因此在备考时可以多关注一下这方面的内容。在备考初期，可能会出现做不动的情况，比如一开始的连续与极限，以及不定积分定积分等题目，容易让人感到做不下去，一方面是因为很多题的难度其实已经对标考研甚至比考研难度高了，另一方面这部分内容的学习曲线可能确实比较陡峭，但是只要坚持下去，其实觉得就还好了，主要是不要放弃。</p>
<h3 id="408"><a class="markdownIt-Anchor" href="#408"></a> 408</h3>
<p>首先对于专业课选择上面，408由于涉及4门计算机专业的核心课程，所以难度确实还是很大的，因此其实也可以选择其他自命题的专业课，比如有些院校只考察C语言、数据结构等。408属于统考科目，是统一出卷阅卷的，其优点是相对公平，并且有成型的参考书与备考策略，缺点是内容多难度大。自命题科目优点是内容较少，缺点是不透明，有些题目可能本身就是错的，需要自己去找相应的往年习题以及参考资料，而且题目类型可能也会发生大的变化。</p>
<p>对于408来说，显著的考察特征是知识点琐碎，杂，难以记忆，且备考内容非常多。从题型来看，40道2分选择题，数据结构、机组、操作系统各2道大题，计网一道大题，每道大题的一问很多时候只有1-2分，这种琐碎的分值分布导致了408会非常考察细节，同时你的成绩也会相对比较稳定，不会出现太大的失误波动，但同时也决定了很难考到特别顶级的分数，就像今年，今年的408相对来说难度比较高（可能也有判卷比较严的原因），我在排名表上看到分数120以上的都很少，整个科软800多人录分130+的只有凤毛麟角的10人左右。</p>
<p>408只推荐王道，直接看王道的单科书就可以，王道视频没太大看的必要，因为视频里讲的一般是书的子集。复习时基本上就是看书的知识点，然后做后面的习题(习题是可以看王道视频的，很多习题只看书面的答案可能不太好搞清楚是怎么回事，视频讲解会更加清楚，细致一些)。看书的顺序我是数据结构、机组、操作系统、计网，其实看书什么顺序都可以，另外我其实比较推荐先看机组，因为数据结构一上来先讲线性结构，而线性结构又是算法题的重点，因此容易导致一上来就陷入算法题的泥沼中难以前进，导致进度缓慢。由于我的备考时间较短，因此习题我只做了选择题以及真题，其他的题目水平参差不齐，因此也就没有多做，如果备考时间比较充裕的话也可以考虑做掉。</p>
<p>408备考时要学会舍入，有些知识点可能在刚刚一开始接触的时候非常劝退，比如数据结构算法题、机组定点数乘除法、操作系统PV操作等，在第一轮时，最重要的事情是先把整个的内容给过下来，因此对于某些比较有难度的知识点可以先跳过。同时408也非常注重整体性的串联，题目综合性很高，因此从大局入手，开始时不被太多的细节就缠住是很重要的。在第一遍过完之后，你可能会发现最开始学的科目已经忘记的差不多了，所以再开始过第二遍，主要是负责进行回忆，同时对于自己一开始放掉的一些知识点再去看，你可能就会有醍醐灌顶的感觉，觉得也并不是那么难了，过第二遍时速度可以加快很多，你会发现记忆会牢固不少。之后可以考虑过第三遍，加深记忆，同时去认真读每一个细节，因为它们可能都是出题点，争取不放过任何一个细节。再之后就可以做真题，并且查漏补缺，巩固记忆了。408备考最重要的一点就是反复多次，不要忽视任何一个细节，它其实并不需要你死记硬背，更多时候是你看得多了，理解到位了，印象深刻了，也就记住了。</p>
<h2 id="复试"><a class="markdownIt-Anchor" href="#复试"></a> 复试</h2>
<p>一共5-6个老师，有3个老师问了问题，老师方的杂音很大，所以很多问题听的不是很清楚，总体表现挺差（</p>
<h3 id="英语面"><a class="markdownIt-Anchor" href="#英语面"></a> 英语面</h3>
<p>首先是自我介绍，3分钟左右。接着老师问了我学过哪些专业课。一听到这个问题的时候我是懵的，我心想我不是科班么，为啥会问我这种问题，所以想当然的当作了我印象最深的课。所以我先说了高程，然后讲了一些高程的内容，老师问说什么语言，我回答是cpp，老师问我还会其他什么语言么，我回答比较常用的有python、golang，偶尔也会写一些js和一些前端语言。老师继续问，还有其他的么？我：？？？。然后回答了计网，说了在计网课上学过一些系统编程。然后老师又问我还有其他的么？我就比较懵，老师看出来了我好像没有听懂问题，所以又解释了一下。他说我不是计算机的学生么，我上过这么多计算机的课程，那我都上过什么课，这个时候我才反映过来是要让我报菜名，然后回答了编译原理，数据库，操作系统。</p>
<h3 id="专业面"><a class="markdownIt-Anchor" href="#专业面"></a> 专业面</h3>
<p>因为英语面的时候我回答了计网（很后悔，因为自己计网其实学的很差），所以老师上来问了我些关于计网的问题。后面因为自己说了软开的经历，所以问了许多软工的问题。</p>
<p>问：TCP-IP协议有几层。</p>
<p>答：四层，但是网络层和网际层答反了，实际上是因为忘记了其中一个具体是什么名字了，所以比较慌张（网络接口层），一直比较着急是说下面的那一层对应的是物理层和链路层，所以没太思考好名字错了的这个问题，老师还反复确认了到底谁在最下面，还有个老师笑了，但我还是坚定了错误答案，当时应该说记不清了的。</p>
<p>问：每一层有哪些经典的协议。</p>
<p>答：应用层HTTP、传输层TCP UDP、网际层IP、网络接口层以太网协议。接着又问了我以太网协议说的是xx么？（忘记了）我回答不是，是IEEE 802这种。</p>
<p>问：说一下什么是拥塞控制</p>
<p>答：用超市拥挤举例，人流量大的时候大家进不来也出不去，会导致整个网络负载非常大，丢包误包率很高。这个时候就需要调整流量，让一方先行，从而减少网络负担。</p>
<p>问：软件的生命周期</p>
<p>答：问题定义、可行性分析与需求分析、系统设计、详细设计、编码实现、测试、验收、废弃或重构</p>
<p>问：有没有软件开发的经历</p>
<p>答：讲了软工课上敏捷开发的经历，说了不少</p>
<p>问：网络工程中基械的概念</p>
<p>答：机械？什么机械？解释说是基本的基，器械的械，回答 不太了解，后续也未查到</p>
<p>问：黑盒白盒灰盒测试</p>
<p>答：白盒是静态代码逻辑审查，黑盒是将系统作为一个整体测试输入输出，灰盒是两者结合，都要做</p>
<p>问：路径覆盖测试属于什么测试，xx（忘记了）属于什么测试<br />
答：都属于白盒测试</p>
<p>问：听说过测试驱动开发么？更偏向于敏捷开发还是传统开发？<br />
答：根据约定的接口，用测试用例倒逼开发，能够防止惯性思维，同时易于规定标准等。更偏向于敏捷开发。</p>
<p>问：敏捷开发有哪些模式<br />
答：不清楚，但是后续搜到了确实有一些模式分类</p>
<h3 id="机试"><a class="markdownIt-Anchor" href="#机试"></a> 机试</h3>
<p>今年的机试是一个小时五道编程题。平心而论其实难度挺低的，除了第四个区间dp以外其他题感觉稍微做过一些算法题的都能写出来，科软群里面主要是有太多人是真的一点代码都写不出来了，像是第五题这种裸搜索在平时的数据结构课上作为平时作业都做过。</p>
<p>另外还有一些同学抱怨不透露消息，但实际上官网与往年不同，专门多加了一个C语言上机编程，这实际上是相当明显的一个暗示了。但是大家都不以为然，想着不给环境不能编程（实际上像leetcode模式完全可以），机试不好判等等因素，结果还是准备的是选择题。只能说一方面是被带节奏带多了，另一方面自己也没有好好思考过可能性，结果真的就信以为真了，所以很多同学都有一种被欺骗了的感觉，但事实上不考虑群里面一直鼓吹选择题的气氛，单从官方通知的角度来看我觉得这种暗示程度其实以及不小了。群里面大家都是吐槽带节奏，真的信了的话只能说太单纯了。另外卞老师显然就是什么都不知道的样子，起码有一些自己的判断吧。而且全准备选择题不考虑编程的可能性这无疑也是自己下的赌注，all in总是要做好翻车的代价的。</p>
<p>另外还有一些吐槽保密措施的。我觉得这也无可厚非吧，毕竟作为院校来说科软从来没有说自己偏爱跨考，招生肯定还是希望招收专业技能、综合素质更加高的学生，作为考察来说当然是看你能力而不是因为你是跨考就对你网开一面。如果提前告诉了太多考试内容的话考生可以提前准备，这样实际上是会掩盖掉许多问题了，如果我是作为考核者肯定是希望检查的是学生的基本功，而不是针对我的考试所专门培养的应试能力。</p>
<p>只能说，不要有些话听多了说多了就真的以为是真的了。</p>
<p>考试的oj非常奇怪，既不是传统的自己写完整的程序，然后读取数据处理，也不是像leetcode一样补全函数，而是给了完整的程序，让你补全函数，但是测试用例是写死在main函数当中，在考试过程中你可以修改main函数中的测试用例并且直接提交整个文件内容来获取结果。使用的是像leetcode一样的在线编辑器，不能够调试和自动补全。对于这种东西，我设想的一种可能的测评方式是将提交的每个源文件中的main函数批量替换成标准测试用例，但是总觉得这种做法很怪。</p>
<ol>
<li>第一题是求斐波那契数列。数据范围是1-89，有些同学一上来就想着递归，只能说对时间复杂度完全没有概念了，除非加记忆化。开数组或者直接a+b都可以，需要注意数据很大，会爆int，需要用long long存.</li>
<li>第二题10进制正整数转16进制，不许用库函数。除k取余倒着输出，用栈和递归都可以</li>
<li>求一个自然数序列中下标连续且数值连续的递减序列的最大长度。从下标为1的地方开始往后扫一遍即可，每次和前一个值对比是不是比它小一，是的话序列长度++，不是的话更新答案，序列长度重置为一</li>
<li>给一个字符串，可以在任意一个位置添加任意一个字符，问使其变为回文串的最小操作次数。考虑区间dp，对于<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">[</mo><mi>i</mi><mo separator="true">,</mo><mi>j</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">[i,j]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mclose">]</span></span></span></span>的字符串来说，我们假设所有比其规模小的子问题全部得到了解决。当<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>s</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo>=</mo><mo>=</mo><mi>s</mi><mo stretchy="false">[</mo><mi>j</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">s[i]==s[j]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">s</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span></span><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">s</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mclose">]</span></span></span></span>时，显然<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mi>p</mi><mo stretchy="false">[</mo><mi>i</mi><mo separator="true">,</mo><mi>j</mi><mo stretchy="false">]</mo><mo>=</mo><mi>d</mi><mi>p</mi><mo stretchy="false">[</mo><mi>i</mi><mo>+</mo><mn>1</mn><mo separator="true">,</mo><mi>j</mi><mo>−</mo><mn>1</mn><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">dp[i,j]=dp[i+1,j-1]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.85396em;vertical-align:-0.19444em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">]</span></span></span></span>，且考虑边界不会使其更优。否则就是<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>s</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo stretchy="false">!</mo><mo>=</mo><mi>s</mi><mo stretchy="false">[</mo><mi>j</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">s[i]!=s[j]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">s</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mclose">!</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">s</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mclose">]</span></span></span></span>时，我们需要在<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">[</mo><mi>i</mi><mo separator="true">,</mo><mi>j</mi><mo>−</mo><mn>1</mn><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">[i,j-1]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">]</span></span></span></span>已经解决的基础上在最左边再加上一个<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>s</mi><mo stretchy="false">[</mo><mi>j</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">s[j]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">s</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mclose">]</span></span></span></span>，或者在<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">[</mo><mi>i</mi><mo>+</mo><mn>1</mn><mo separator="true">,</mo><mi>j</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">[i+1,j]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mclose">]</span></span></span></span>已经解决的基础上在最右边再加上一个<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>s</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">s[i]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">s</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span></span></span></span>，这样就可以继续完成回文串。因此可以得到dp方程：$$s[i]==s[j]时,dp[i][j]=dp[i+1][j-1]$$$$s[i]!=s[j]时,dp[i][j]=min(dp[i][j-1]+1,dp[i+1][j]+1)$$<br />
在实现的时候需要注意边界条件是对角线元素全部都是0（单个字符一定回文），另外可以发现此题中的规模是长度，并且当前规模的状态转移都是从小规模而来，所以可以先枚举长度，再枚举起点。该题另外还有一个点就是在于题目中并没有给出数据范围，而且第五题较为简单，所以我在考场上一直以为是个思维题或者线性dp。</li>
<li>求一个10*16的01图中最大的1联通区域的大小。裸的搜索题，对于每一个为值为1的格子开始进行搜索，并在搜索的过程中把格子置为0，返回并且更新答案，也可以用vis数组做。有一个点是该题的宏定义为row与col，而我自己dfs函数的形参也叫这两个名字，导致我一直报莫名其妙的错误，调了不少时间。)</li>
</ol>
<h1 id="关于联培"><a class="markdownIt-Anchor" href="#关于联培"></a> 关于联培</h1>
<p>科软虽然是以无导师制闻名，但是也有着联合培养计划。所谓联合培养就是去科软与其他外面的实验室合作（例如苏州高等研究院、深圳先进研究院等）或者是和其他学院的老师（先研院、计院等），进行联合培养，大一仍按照科软的培养计划上课，后面则不去实习，而是进行正常的科学研究，整个的培养过程是按照学硕培养。简而言之，就是相当于变成了正常的研究生。</p>
<p>对于我本身来说，最后是选择了苏高院的朱老师进行了联培，主要的研究方向是体系结构+AI。虽然一开始的目标是无导师制，但是后面自己考了许多其他因素，还是选择了联培。</p>
<p>第一点是因为自己一开始不想从事科研工作是觉得最后只产出论文的话可能像是本科课程那样去编报告。但是后面随着自己和一些搞科研的同学的不断接触以及自己对这方面的了解不断加深，我发现科研很多时候其实是多年磨一剑，是真的在某方面有了一些较为突出的成果才能有不错的科研成果，而不是像知网上那样鱼龙混杂的水文章。所以个人对于科研的抵触情感是逐渐变小了许多的。</p>
<p>第二点是个人性格原因，如果是高中同学的话其实比较清楚，我在学习的过程中喜欢较真，而且对于学习其实并不持抵触心态，大部分情况下还是觉得学习是一件有意义的事情的。另外对于一个较为理想的学习环境还是比较喜欢的，所以也是觉得做一些研究性质的工作还是蛮适合自己的。</p>
<p>第三点是因为自己本科期间学习的东西比较杂乱，只能说大致形成了一个结构，能够简单的总览计算机这个学科，但是在深度方面可能欠缺许多。本来想着是通过科软这一年上课的时间自己再巩固，深入一下。可是一方面自己对于要向着哪一方面深造还是比较迷茫的，另外靠着完全自驱去学习最后的效果也可能不是很好。而后面了解到朱老师这边做的分布式、体系结构等相关内容都是我比较感兴趣的内容。之前不喜欢科研也有一点原因是现在主流是AI方向，调参，不是我很喜欢的东西，虽然朱老师的方向也是和AI有着很强关联，但是更加偏计算机本身，这方面我更加感兴趣一些。而且打听到朱老师人很不错，恰好有这么一个比较合适的机会，所以选择了联培，进行进一步的深入学习。</p>
<p>第四点是因为我觉得周围人的学习氛围以及知识维度对于自己的一个眼界影响还是蛮大的，因为科软可能大部分都是跨考的同学，所以大家对技术这方面的关注度可能不是很多，而实验室的老师，包括学长这些能够对这方面有所帮助（此前一个不想科研的原因是本科期间接触的许多老师给我一种活在10年前，与现代互联网完全脱节的形象，所以对科研工作者有了一种老古板的印象。但是后面发现这实际上是年纪较大的老师的问题，跟着一些比较年轻的老师搞科研这方面会好很多）。</p>
<p>第五点是现在经济下行，就业形势也变得越来越严峻。所以这种情况下更应该想办法增强自己的竞争力。上学嘛，能上还是尽量上的，我也并不那么着急工作。从事体系结构方面的工作我觉得可以让我的基础功底更加扎实，即使后续再去找工作也会好很多。另外在学习的年纪深造一下也并不是一件坏事，所以最后还是选择了联培。</p>
]]></content>
      <categories>
        <category>感想杂谈</category>
      </categories>
      <tags>
        <tag>考研</tag>
      </tags>
  </entry>
  <entry>
    <title>工程中对于默认参数使用的注意</title>
    <url>/%E5%B7%A5%E7%A8%8B%E4%B8%AD%E5%AF%B9%E4%BA%8E%E9%BB%98%E8%AE%A4%E5%8F%82%E6%95%B0%E4%BD%BF%E7%94%A8%E7%9A%84%E6%B3%A8%E6%84%8F/</url>
    <content><![CDATA[<p>这个主要是前几天在和队友一起合作写代码时遇到的一个bug，具体可以简化为我写了一个函数A，这个A中有一个参数是默认参数，我之前是在外部调用了这个函数，其实是对这个默认参数传入了变量的。但是后来队友在补充修改的时候，在他的那边的B函数中也调用了我的函数A，但是因为函数A不是他完成的，然后对于参数的含义不是很理解，然后最后一个参数因为是默认参数，所以不传参也不会出现报错等问题，所以就导致他在B函数中调用我的A函数时没有传参，始终都是默认参数。<br><br />
这就导致了我后来pull以后运行发现无论我怎么改动传入A函数的中的参数结果都不会变（在外部也有调用A函数的部分），然后我就一直对着外部的这个A函数纠结，然后对A函数本身的实现debug，纠结了好久最后才发现是B函数中调用了A函数结果没有对这个默认参数传参，导致了结果一直不会变<br><br />
这个事情主要是提醒之后在编写函数时，使用默认参数的时候要注意，防止其他人调用此函数时没有注意到，默认参数可以使用一个有初始值的外部变量传参代替。之后就是要注意做好模块化测试，防止自己的模块出现问题而导致其他人在运行的时候出现问题而摸不到头脑。</p>
]]></content>
      <categories>
        <category>工程理念</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>多人合作</tag>
      </tags>
  </entry>
  <entry>
    <title>排序中遇到的一个小陷阱</title>
    <url>/%E6%8E%92%E5%BA%8F%E4%B8%AD%E9%81%87%E5%88%B0%E7%9A%84%E4%B8%80%E4%B8%AA%E5%B0%8F%E9%99%B7%E9%98%B1/</url>
    <content><![CDATA[<p>我们都知道，C++STL中允许我们去重载&lt;，来实现自定义元素的比较。但我们在自定义比较时，我们要注意一些问题。首先就是，STL规定的&lt;是一种严格弱序关系，满足反自反性（f(x,x)为假），非对称性（f(x,y)与f(y,x)结果不同），传递性（f(x,y)为真，f(y,z)为真，则f(x,z)也为真），既需要满足即&lt;表达的关系是一种严格小于关系，而不能是小于等于。严格弱序关系保证了一些性质，即严格弱序的&lt;可以用来表达其他的运算符。</p>
<blockquote>
<p>a &gt; b：!(a &lt; b)		<br><br />
a == b：!(a &lt; b) &amp;&amp; !(b &lt; a)  <br><br />
a !=b：(a &lt; b) || (b &lt; a)  <br><br />
a &lt;= b：!(b &lt; a) <br><br />
a &gt;= b：!(a &lt; b)</p>
</blockquote>
<p>而对于不严格的比较来说，比如在<mark>关系中，严格弱序与非严格就会出现不同的结果。因此在重载时如果不满足严格弱序会出现各种各样的问题，包括不限于RE，TLE等等。<br><br />
我在之前的代码当中也是出现过这个错误，本来是写一个比较复杂，有多重条件的比较函数，其中有一项是，当值为x时，该元素就要无条件排在最前面（值为x的元素保证只有一个），而当时我只写了对于f(a,b)来说，如果a</mark>x，则直接返回1，但是这样写有一个问题，它是不满足严格弱序的。对于非对称性而言，f(x,y)一定能返回真，但是f(y,x)却不一定能返回假，所以我们在这里定义的比较函数是不满足非对称性的，也就是说不满足严格弱序，因此这样的函数是会出现问题的。<br><br />
那么怎么解决呢？我们只需要在再加一条，否则如果b==x的话，则返回0。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">f(a,b):</span><br><span class="line">	<span class="keyword">if</span>(a==x):</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">   <span class="keyword">else</span> <span class="keyword">if</span>(b==x)</span><br><span class="line">   	 <span class="keyword">return</span> <span class="number">0</span></span><br></pre></td></tr></table></figure>
<p>通俗的来说，就是在定义比较函数时要记得自己定义的情况考虑了反面，考虑了所有情况，尽量写成return a&lt;b的形式或者也可以写成</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> a&lt;b:</span><br><span class="line">	<span class="keyword">return</span> <span class="number">1</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> a&gt;b:</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span></span><br></pre></td></tr></table></figure>
<p>的形式，但是注意写成后者一定要写全，一定要把后面的情况考虑到</p>
]]></content>
      <categories>
        <category>理论学习</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>离散数学</tag>
      </tags>
  </entry>
</search>
